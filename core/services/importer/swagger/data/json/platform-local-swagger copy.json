{
  "swagger": "2.0",
  "info": {
    "version": "v1",
    "title": "Platform Services API",
    "license": {
      "name": "(C) Illumina Inc, All Rights reserved."
    }
  },
  "host": "platform.us.informatics.illumina.com:8080",
  "basePath": "/platform-services-manager",
  "tags": [
    {
      "name": "notification-rest-manager",
      "description": "Notification Rest Manager"
    },
    {
      "name": "session-tracker-rest-manager",
      "description": "Session Tracker Rest Manager"
    },
    {
      "name": "groups-rest-manager",
      "description": "Groups Rest Manager"
    },
    {
      "name": "bulk-container-permission-rest-manager",
      "description": "Bulk Container Permission Rest Manager"
    },
    {
      "name": "api-registry-rest-manager",
      "description": "API Registry Rest Manager"
    },
    {
      "name": "entitlement-rest-manager",
      "description": "Entitlement Rest Manager"
    },
    {
      "name": "jwt-rest-manager",
      "description": "JWT Rest Manager"
    },
    {
      "name": "usage-rest-manager",
      "description": "Usage Rest Manager"
    },
    {
      "name": "organization-roles-rest-manager",
      "description": "Organization Roles Rest Manager"
    },
    {
      "name": "swagger-2-rest-manager",
      "description": "Swagger 2 Rest Manager"
    },
    {
      "name": "dmap-authentication-rest-manager",
      "description": "Dmap Authentication Rest Manager"
    },
    {
      "name": "permission-rest-manager",
      "description": "Permission Rest Manager"
    },
    {
      "name": "platform-configuration-rest-manager",
      "description": "Platform Configuration Rest Manager"
    },
    {
      "name": "container-rest-manager",
      "description": "Container Rest Manager"
    },
    {
      "name": "notification-rule-rest-manager",
      "description": "Notification Rule Rest Manager"
    },
    {
      "name": "custom-credentials-rest-manager",
      "description": "Custom Credentials Rest Manager"
    },
    {
      "name": "api-definition-rest-manager",
      "description": "API Definition Rest Manager"
    },
    {
      "name": "cluster-service-rest-manager",
      "description": "Cluster Service Rest Manager"
    },
    {
      "name": "notification-template-rest-manager",
      "description": "Notification Template Rest Manager"
    },
    {
      "name": "account-rest-manager",
      "description": "Account Rest Manager"
    },
    {
      "name": "api-model-rest-manager",
      "description": "API Model Rest Manager"
    },
    {
      "name": "application-management-rest-manager",
      "description": "Application Management Rest Manager"
    },
    {
      "name": "application-messages-rest-manager",
      "description": "Application Messages Rest Manager"
    },
    {
      "name": "discovery-rest-manager",
      "description": "Discovery Rest Manager"
    },
    {
      "name": "container-level-permission-rest-manager",
      "description": "Container Level Permission Rest Manager"
    },
    {
      "name": "organizations-rest-manager",
      "description": "Organizations Rest Manager"
    },
    {
      "name": "users-rest-manager",
      "description": "Users Rest Manager"
    },
    {
      "name": "countries-rest-manager",
      "description": "Countries Rest Manager"
    },
    {
      "name": "domain-rest-manager",
      "description": "Domain Rest Manager"
    },
    {
      "name": "user-permissions-rest-manager",
      "description": "User Permissions Rest Manager"
    },
    {
      "name": "o-auth-rest-manager",
      "description": "O Auth Rest Manager"
    },
    {
      "name": "audit-log-rest-manager",
      "description": "Audit Log Rest Manager"
    },
    {
      "name": "audit-report-rest-manager",
      "description": "Audit Report Rest Manager"
    },
    {
      "name": "impersonation-rest-manager",
      "description": "Impersonation Rest Manager"
    },
    {
      "name": "rest-manager",
      "description": "Rest Manager"
    },
    {
      "name": "consumable-entity-rest-manager",
      "description": "Consumable Entity Rest Manager"
    },
    {
      "name": "o-auth-child-apps-rest-manager",
      "description": "O Auth Child Apps Rest Manager"
    },
    {
      "name": "organization-util-rest-manager",
      "description": "Organization Util Rest Manager"
    },
    {
      "name": "roles-rest-manager",
      "description": "Roles Rest Manager"
    }
  ],
  "paths": {
    "/APIDefinition/": {
      "get": {
        "tags": [
          "api-definition-rest-manager"
        ],
        "summary": "Get all api metadata list",
        "description": "Get all api metadata list",
        "operationId": "getAllUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "name": "clientId",
            "in": "query",
            "description": "clientId",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "type": "object"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "post": {
        "tags": [
          "api-definition-rest-manager"
        ],
        "summary": "Register API",
        "description": "Register API",
        "operationId": "saveUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "apiMetadataTO",
            "description": "API to register",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ApiMetadataTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "201": {
            "description": "Returns a Account",
            "schema": {
              "type": "object"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict - Duplicate service"
          },
          "500": {
            "description": "Unexpected error"
          }
        }
      }
    },
    "/APIDefinition/{id}": {
      "get": {
        "tags": [
          "api-definition-rest-manager"
        ],
        "summary": "Get all api metadata",
        "description": "Get all api metadata",
        "operationId": "getUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Swagger document information to create",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "tags": [
          "api-definition-rest-manager"
        ],
        "summary": "Update api metadata",
        "description": "Update api metadata",
        "operationId": "updateUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "id",
            "description": "Swagger document information to create",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ApiMetadataTO"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Updated",
            "schema": {
              "type": "object"
            }
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict - Duplicate Account"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/APIModels/": {
      "get": {
        "tags": [
          "api-model-rest-manager"
        ],
        "summary": "Get all api Model List",
        "description": "Get all api models",
        "operationId": "getAllUsingGET_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "clientId",
            "in": "query",
            "description": "clientId",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "type": "object"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "post": {
        "tags": [
          "api-model-rest-manager"
        ],
        "summary": "Register API Model",
        "description": "Register API Model",
        "operationId": "saveUsingPOST_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "apiModelTO",
            "description": "API to register",
            "required": true,
            "schema": {
              "$ref": "#/definitions/APIModelTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "201": {
            "description": "Returns a Account",
            "schema": {
              "type": "object"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict - Duplicate service"
          },
          "500": {
            "description": "Unexpected error"
          }
        }
      }
    },
    "/APIModels/{id}": {
      "get": {
        "tags": [
          "api-model-rest-manager"
        ],
        "summary": "Get all api metadata",
        "description": "Get all api metadata",
        "operationId": "getUsingGET_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Swagger document information to create",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "tags": [
          "api-model-rest-manager"
        ],
        "summary": "Update api model",
        "description": "Update api @author rdusane",
        "operationId": "updateUsingPUT_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "id",
            "description": "id",
            "required": true,
            "schema": {
              "$ref": "#/definitions/APIModelTO"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Updated",
            "schema": {
              "type": "object"
            }
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict - Duplicate Account"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "delete": {
        "tags": [
          "api-model-rest-manager"
        ],
        "summary": "DELETE Api model",
        "description": "DELETE Api model.",
        "operationId": "deleteUsingDELETE",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/APIRegistry/": {
      "get": {
        "tags": [
          "api-registry-rest-manager"
        ],
        "summary": "Get list of APIs",
        "description": "Fetch all APIs",
        "operationId": "getServiceRegistryUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "clientId",
            "in": "query",
            "description": "clientId",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/APIRegistry/uploadSwagger": {
      "post": {
        "tags": [
          "api-registry-rest-manager"
        ],
        "summary": "Upload Gateway API Swagger Definition",
        "description": "Upload Swagger for a client. Uses ABT Token",
        "operationId": "uploadSwaggerFileUsingPOST",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "name": "client",
            "in": "query",
            "description": "client",
            "required": true,
            "type": "string"
          },
          {
            "name": "file",
            "in": "formData",
            "description": "file",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/Account/": {
      "get": {
        "tags": [
          "account-rest-manager"
        ],
        "summary": "Get Account list registered with platform. ",
        "description": "Get Account list registered with platform. . Use ABT JWT token for authorization - Refer: https://confluence.illumina.com/display/PLAT/Platform+JWT+tokens",
        "operationId": "getAccountListUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "An authorized ABT JWT bearer token (Only APP to APP token has access)",
            "required": true,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset into the table",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Page Size",
            "required": false,
            "type": "integer",
            "default": 100,
            "format": "int32"
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "property to sort by",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortDir",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Unexpected error",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AccountTO"
              }
            }
          },
          "201": {
            "description": "Returns Account list",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AccountTO"
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "x-example": {
          "source": "db",
          "sourceIdentifier": "getAccountListExample"
        },
        "x-references": {
          "source": "db",
          "sourceIdentifier": "getAccountListReferences"
        }
      },
      "post": {
        "tags": [
          "account-rest-manager"
        ],
        "summary": "Create a Account object.",
        "description": "Create a Account object. Use ABT JWT token for authorization - Refer: https://confluence.illumina.com/display/PLAT/Platform+JWT+tokens",
        "operationId": "saveAccountUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "An authorized ABT JWT bearer token (Only APP to APP token has access)",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "Account",
            "description": "Account information to create",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AccountTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Unexpected error",
            "schema": {
              "type": "object"
            }
          },
          "201": {
            "description": "Returns a Account",
            "schema": {
              "type": "object"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict - Duplicate Account"
          }
        }
      }
    },
    "/Account/{id}": {
      "get": {
        "tags": [
          "account-rest-manager"
        ],
        "summary": "Get a Account object.",
        "description": "Get a Account object. Use ABT JWT token for authorization - Refer: https://confluence.illumina.com/display/PLAT/Platform+JWT+tokens",
        "operationId": "getAccountUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "An authorized ABT JWT bearer token (Only APP to APP token has access)",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Unexpected error",
            "schema": {
              "type": "object"
            }
          },
          "201": {
            "description": "Returns a Account",
            "schema": {
              "type": "object"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "x-example": {
          "source": "db",
          "sourceIdentifier": "getAccountObjectExample"
        },
        "x-references": {
          "source": "db",
          "sourceIdentifier": "getAccountObjectReferences"
        }
      },
      "put": {
        "tags": [
          "account-rest-manager"
        ],
        "summary": "Update a Account.",
        "description": "Update a Account. Use ABT JWT token for authorization - Refer: https://confluence.illumina.com/display/PLAT/Platform+JWT+tokens",
        "operationId": "updateAccountUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "An authorized ABT JWT bearer token (Only APP to APP token has access)",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "Account",
            "description": "Account information to create",
            "required": false,
            "schema": {
              "$ref": "#/definitions/AccountTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Unexpected error",
            "schema": {
              "type": "object"
            }
          },
          "201": {
            "description": "Created"
          },
          "204": {
            "description": "Returns no content",
            "schema": {
              "type": "object"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict - Duplicate Account"
          }
        }
      },
      "delete": {
        "tags": [
          "account-rest-manager"
        ],
        "summary": "Delete a Account.",
        "description": "Delete a Account. Use ABT JWT token for authorization - Refer: https://confluence.illumina.com/display/PLAT/Platform+JWT+tokens",
        "operationId": "deleteAccountUsingDELETE",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "An authorized ABT JWT bearer token (Only APP to APP token has access)",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Unexpected error",
            "schema": {
              "type": "object"
            }
          },
          "204": {
            "description": "successful delete, no content returned",
            "schema": {
              "type": "object"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/Applications/Scopes": {
      "put": {
        "tags": [
          "application-management-rest-manager"
        ],
        "summary": "Save scopes/permissions for application",
        "description": "Save scopes/permissions for application.  Authorization: ABT and Platform global admin Token",
        "operationId": "saveScopesUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "name": "clientId",
            "in": "query",
            "description": "clientId - required with Platform Admin token",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "scopes",
            "description": "scopes",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ScopeTO"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/Applications/{clientId}/{roleId}/Permissions": {
      "get": {
        "tags": [
          "application-management-rest-manager"
        ],
        "summary": "Get Role-Permissions map",
        "description": "Get Role Permission Mapping.  Authorization: Platform Global Admin UBT or ABT Token",
        "operationId": "getRolePermissionsMappingUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "name": "roleId",
            "in": "path",
            "description": "roleId",
            "required": true,
            "type": "string"
          },
          {
            "name": "clientId",
            "in": "path",
            "description": "clientId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "400": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "put": {
        "tags": [
          "application-management-rest-manager"
        ],
        "summary": "Map Permissions",
        "description": "Associate Role to Permissions.  Authorization: Platform Global Admin UBT or ABT Token",
        "operationId": "mapPermissionsUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "name": "roleId",
            "in": "path",
            "description": "roleId",
            "required": true,
            "type": "string"
          },
          {
            "name": "clientId",
            "in": "path",
            "description": "clientId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "permsTO",
            "description": "permsTO",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PermissionListTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/AuditLog/send-email": {
      "post": {
        "tags": [
          "audit-log-rest-manager"
        ],
        "summary": "Send Audit-Logs via. email",
        "description": "Get audit-logs. Permission Matrix: [Domain admin - {ACCESS - ALL Audit-Logs}, Org founder/Owner? , User -{N/A} ]. Authorization: User Bearer Token (UBT)",
        "operationId": "sendAuditLogsViaEmailUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From Date",
            "required": true,
            "type": "string"
          },
          {
            "name": "to",
            "in": "query",
            "description": "To Date",
            "required": true,
            "type": "string"
          },
          {
            "name": "type",
            "in": "query",
            "description": "event type",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "email address of recipient",
            "in": "query",
            "description": "emailTo",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Page«object»"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/AuditReport/": {
      "get": {
        "tags": [
          "audit-report-rest-manager"
        ],
        "summary": "get Audit-Logs",
        "description": "Get audit-logs. Permission Matrix: [Domain admin - {ACCESS - ALL Audit-Logs}, Org founder/Owner? , User -{N/A} ]. Authorization: User Bearer Token (UBT) token",
        "operationId": "getAuditLogsUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From Date (YYYY-MM-DD)",
            "required": true,
            "type": "string"
          },
          {
            "name": "to",
            "in": "query",
            "description": "To Date (YYYY-MM-DD)",
            "required": true,
            "type": "string"
          },
          {
            "name": "type",
            "in": "query",
            "description": "event type",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset into the table",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Page Size",
            "required": false,
            "type": "integer",
            "default": 100,
            "format": "int32"
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "property to sort by",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortDir",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Page«object»"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/AuditReport/New/": {
      "put": {
        "tags": [
          "audit-report-rest-manager"
        ],
        "summary": "get Audit-Logs",
        "description": "Get audit-logs. Permission Matrix: [Domain admin - {ACCESS - ALL Audit-Logs}, Org founder/Owner? , User -{N/A} ]. Authorization: User Bearer Token (UBT) token",
        "operationId": "getAuditLogsNewUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "auditEventTO",
            "description": "auditEventTO",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AuditReportInputTO"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset into the table",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Page Size",
            "required": false,
            "type": "integer",
            "default": 100,
            "format": "int32"
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "property to sort by",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortDir",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Page«object»"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/ClusterService/Clean": {
      "delete": {
        "tags": [
          "cluster-service-rest-manager"
        ],
        "summary": "Perform cleaning of domain mappings",
        "description": "Perform cleaning of domain mappings",
        "operationId": "cleanMappingsUsingDELETE",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "apiKey",
            "in": "header",
            "description": "apiKey",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/ClusterService/DomainUrlMappings": {
      "get": {
        "tags": [
          "cluster-service-rest-manager"
        ],
        "summary": "Get all enterprise mappings",
        "description": "Get all domain url mappings registered with platform",
        "operationId": "getAllDomainMappingsUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "apiKey",
            "in": "header",
            "description": "apiKey",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/ClusterService/LocalNode/Members": {
      "get": {
        "tags": [
          "cluster-service-rest-manager"
        ],
        "summary": "GET node info of any node from master node",
        "description": "GET node info of any node from master node",
        "operationId": "getLocalNodeMembersUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/ClusterService/Node/{id}": {
      "get": {
        "tags": [
          "cluster-service-rest-manager"
        ],
        "summary": "GET node info of any node from master node",
        "description": "GET node info of any node from master node",
        "operationId": "getNodeInfoFromUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          },
          {
            "name": "apiKey",
            "in": "header",
            "description": "apiKey",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/ClusterService/NodeInfo": {
      "get": {
        "tags": [
          "cluster-service-rest-manager"
        ],
        "summary": "GET node info",
        "description": "Gets node information",
        "operationId": "getNodeInfoUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "nodeId",
            "in": "query",
            "description": "nodeId",
            "required": true,
            "type": "string"
          },
          {
            "name": "apiKey",
            "in": "header",
            "description": "apiKey",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/ClusterService/Resync": {
      "put": {
        "tags": [
          "cluster-service-rest-manager"
        ],
        "summary": "Performs resync in the current node",
        "description": "Performs resync in the current node",
        "operationId": "reSyncUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "apiKey",
            "in": "header",
            "description": "apiKey",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/ClusterService/Status": {
      "get": {
        "tags": [
          "cluster-service-rest-manager"
        ],
        "summary": "Get cluster status",
        "description": "Get cluster status",
        "operationId": "getStatusUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "apiKey",
            "in": "header",
            "description": "apiKey",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/ClusterService/{domainUID}": {
      "get": {
        "tags": [
          "cluster-service-rest-manager"
        ],
        "summary": "Get domain information",
        "description": "Get domain information.",
        "operationId": "getDomainInfoFromLocalUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "apiKey",
            "in": "header",
            "description": "apiKey",
            "required": true,
            "type": "string"
          },
          {
            "name": "domainUID",
            "in": "path",
            "description": "domainUID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/Configuration/": {
      "get": {
        "tags": [
          "platform-configuration-rest-manager"
        ],
        "summary": "Get platform configuration properties",
        "description": "Get platform configuration properties. Authorization: ABT or global admin UBT",
        "operationId": "getPlatformPropertiesFromDBUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "in": "query",
            "description": "name",
            "required": false,
            "type": "string"
          },
          {
            "name": "clientId",
            "in": "query",
            "description": "clientId - only applicable for Platform Admin token",
            "required": false,
            "type": "string"
          },
          {
            "name": "domainUID",
            "in": "query",
            "description": "domainUID",
            "required": false,
            "type": "string"
          },
          {
            "name": "groupName",
            "in": "query",
            "description": "groupName",
            "required": false,
            "type": "string"
          },
          {
            "name": "id",
            "in": "query",
            "description": "id",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset into the table",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Page Size",
            "required": false,
            "type": "integer",
            "default": 100,
            "format": "int32"
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "property to sort by",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortDir",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "post": {
        "tags": [
          "platform-configuration-rest-manager"
        ],
        "summary": "Insert value of platform component version",
        "description": "Insert value of platform component version. Authorization: ABT or global admin UBT.",
        "operationId": "createComponentVersionUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "configurationTO",
            "description": "configurationTO",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ConfigurationTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "put": {
        "tags": [
          "platform-configuration-rest-manager"
        ],
        "summary": "Update configuration property",
        "description": "Update configuration property. Authorization: ABT or global admin UBT (With ABT, it is only allowed to modify own app properties)",
        "operationId": "updateComponentVersionUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "configurationTO",
            "description": "configurationTO",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ConfigurationTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/Configuration/APIKey/User/{pGuid}": {
      "put": {
        "tags": [
          "platform-configuration-rest-manager"
        ],
        "summary": "Update API Key for the user",
        "description": "Update API Key for the user",
        "operationId": "getAPIKeyUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "apiKey",
            "in": "header",
            "description": "apiKey",
            "required": true,
            "type": "string"
          },
          {
            "name": "userApiKey",
            "in": "header",
            "description": "userApiKey",
            "required": true,
            "type": "string"
          },
          {
            "name": "pGuid",
            "in": "path",
            "description": "pGuid",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/Configuration/Auth": {
      "get": {
        "tags": [
          "platform-configuration-rest-manager"
        ],
        "summary": "Get domain config",
        "description": "Get auth configuration for the domain",
        "operationId": "getAuthConfigurationUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "rUrl",
            "in": "query",
            "description": "rUrl",
            "required": false,
            "type": "string"
          },
          {
            "name": "domain",
            "in": "query",
            "description": "domain",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/Configuration/Groups/": {
      "get": {
        "tags": [
          "platform-configuration-rest-manager"
        ],
        "summary": "Get Configuration Groups",
        "description": "Get configuration groups. Authorization: ABT or global admin UBT",
        "operationId": "getPlatformGroupsUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "post": {
        "tags": [
          "platform-configuration-rest-manager"
        ],
        "summary": "Create configuration Group",
        "description": "Create configuration group. Authorization: ABT or global admin UBT.",
        "operationId": "createConfigurationGroupUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "configurationGroupTO",
            "description": "configurationGroupTO",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ConfigurationGroupTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "put": {
        "tags": [
          "platform-configuration-rest-manager"
        ],
        "summary": "Update configuration Group",
        "description": "Update Configuration Group Authorization: ABT or global admin UBT.",
        "operationId": "updateConfigurationGroupUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "configurationGroupTO",
            "description": "configurationGroupTO",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ConfigurationGroupTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/Configuration/Groups/{groupName}": {
      "delete": {
        "tags": [
          "platform-configuration-rest-manager"
        ],
        "summary": "Delete configuration Group",
        "description": "Delete Configuration Group. Authorization: ABT or global admin UBT.",
        "operationId": "removeConfigurationGroupUsingDELETE",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "name": "groupName",
            "in": "path",
            "description": "Group Name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/Configuration/SecretKey": {
      "get": {
        "tags": [
          "platform-configuration-rest-manager"
        ],
        "summary": "generate a secret key",
        "description": "generate a secret key. Authorization: Platform global admin UBT and ABT",
        "operationId": "getSecretKeyUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/Configuration/cleanSessions": {
      "get": {
        "tags": [
          "platform-configuration-rest-manager"
        ],
        "summary": "Execute the given DB query",
        "description": "Cleans auth session",
        "operationId": "cleanSessionsUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "apiKey",
            "in": "header",
            "description": "apiKey",
            "required": true,
            "type": "string"
          },
          {
            "name": "query",
            "in": "query",
            "description": "query",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/Configuration/executeDBQuery": {
      "get": {
        "tags": [
          "platform-configuration-rest-manager"
        ],
        "summary": "Execute the given DB query",
        "description": "Query DB. Only SELECT allowed.",
        "operationId": "executeDBQueryUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "apiKey",
            "in": "header",
            "description": "apiKey",
            "required": true,
            "type": "string"
          },
          {
            "name": "query",
            "in": "query",
            "description": "query",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/Configuration/getGlobalConfig": {
      "get": {
        "tags": [
          "platform-configuration-rest-manager"
        ],
        "summary": "Get platform url for a given enterprise",
        "description": "Get platform system properties",
        "operationId": "getPlatformGlobalPropertiesUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/Configuration/getPlatformUrl": {
      "get": {
        "tags": [
          "platform-configuration-rest-manager"
        ],
        "summary": "Get platform url for a given enterprise",
        "description": "Get platform url for a given enterprise. Helps to route the enterprise to the appropriate location.",
        "operationId": "getPlatformUrlUsingGET_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "domain",
            "in": "query",
            "description": "domain",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/Configuration/getProperty": {
      "get": {
        "tags": [
          "platform-configuration-rest-manager"
        ],
        "summary": "Get platform url for a given enterprise",
        "description": "Get platform system properties",
        "operationId": "getPlatformPropertiesUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "apiKey",
            "in": "header",
            "description": "apiKey",
            "required": true,
            "type": "string"
          },
          {
            "name": "propertyName",
            "in": "query",
            "description": "propertyName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/Configuration/getSystemProperty": {
      "get": {
        "tags": [
          "platform-configuration-rest-manager"
        ],
        "summary": "Get platform url for a given enterprise",
        "description": "Get platform system properties",
        "operationId": "getPlatformSystemPropertiesUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "apiKey",
            "in": "header",
            "description": "apiKey",
            "required": true,
            "type": "string"
          },
          {
            "name": "propertyName",
            "in": "query",
            "description": "propertyName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/Configuration/stack": {
      "get": {
        "tags": [
          "platform-configuration-rest-manager"
        ],
        "summary": "check if system property for stack is matching with DB value ",
        "description": "check if system property for stack is matching with DB value - return true if it matches",
        "operationId": "getStackUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "apiKey",
            "in": "header",
            "description": "apiKey",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "put": {
        "tags": [
          "platform-configuration-rest-manager"
        ],
        "summary": "change value of platform component-stack version",
        "description": "change value of any platform component - stack version",
        "operationId": "updateStackUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "apiKey",
            "in": "header",
            "description": "apiKey",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/Configuration/{id}": {
      "delete": {
        "tags": [
          "platform-configuration-rest-manager"
        ],
        "summary": "Update configuration property",
        "description": "disable configuration property. Authorization: ABT or global admin UBT (With ABT, it is only allowed to modify own app properties)",
        "operationId": "disableComponentUsingDELETE",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "isForceDelete",
            "in": "query",
            "description": "isForceDelete",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/ConsumableEntity/": {
      "get": {
        "tags": [
          "consumable-entity-rest-manager"
        ],
        "summary": "Get ConsumableEntity list registered with platform.",
        "description": "Get ConsumableEntity list registered with platform. Use ABT JWT token for authorization - Refer: https://confluence.illumina.com/display/PLAT/Platform+JWT+tokens",
        "operationId": "getConsumableEntityListUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset into the table",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Page Size",
            "required": false,
            "type": "integer",
            "default": 100,
            "format": "int32"
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "property to sort by",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortDir",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Unexpected error",
            "schema": {
              "type": "object"
            }
          },
          "201": {
            "description": "Returns a ConsumableEntity",
            "schema": {
              "type": "object"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict - Duplicate ConsumableEntity"
          }
        }
      },
      "post": {
        "tags": [
          "consumable-entity-rest-manager"
        ],
        "summary": "Create a ConsumableEntity object.",
        "description": "Create a ConsumableEntity object. Use ABT JWT token for authorization - Refer: https://confluence.illumina.com/display/PLAT/Platform+JWT+tokens",
        "operationId": "saveUsingPOST_2",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "ConsumableEntity",
            "description": "ConsumableEntity information to create",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ConsumableEntityTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Unexpected error",
            "schema": {
              "type": "object"
            }
          },
          "201": {
            "description": "Returns a ConsumableEntity",
            "schema": {
              "type": "object"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict - Duplicate ConsumableEntity"
          }
        }
      }
    },
    "/ConsumableEntity/{id}": {
      "get": {
        "tags": [
          "consumable-entity-rest-manager"
        ],
        "summary": "Get a ConsumableEntity object. ",
        "description": "Get a ConsumableEntity object. Use ABT JWT token for authorization - Refer: https://confluence.illumina.com/display/PLAT/Platform+JWT+tokens",
        "operationId": "getConsumableEntityUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Unexpected error",
            "schema": {
              "type": "object"
            }
          },
          "201": {
            "description": "Returns a ConsumableEntity",
            "schema": {
              "type": "object"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict - Duplicate ConsumableEntity"
          }
        }
      },
      "put": {
        "tags": [
          "consumable-entity-rest-manager"
        ],
        "summary": "Update a ConsumableEntity.",
        "description": "Update a ConsumableEntity. Use ABT JWT token for authorization - Refer: https://confluence.illumina.com/display/PLAT/Platform+JWT+tokens",
        "operationId": "updateConsumableEntityUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "ConsumableEntity",
            "description": "ConsumableEntity information to create",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ConsumableEntityTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Unexpected error",
            "schema": {
              "type": "object"
            }
          },
          "201": {
            "description": "Returns a ConsumableEntity",
            "schema": {
              "type": "object"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict - Duplicate ConsumableEntity"
          }
        }
      },
      "delete": {
        "tags": [
          "consumable-entity-rest-manager"
        ],
        "summary": "Delete a ConsumableEntity.",
        "description": "Delete a ConsumableEntity. Use ABT JWT token for authorization - Refer: https://confluence.illumina.com/display/PLAT/Platform+JWT+tokens",
        "operationId": "deleteUsingDELETE_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Unexpected error",
            "schema": {
              "type": "object"
            }
          },
          "204": {
            "description": "successful delete, no content returned",
            "schema": {
              "type": "object"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/Container/": {
      "get": {
        "tags": [
          "container-rest-manager"
        ],
        "summary": "Get container list",
        "description": "Get Container objects. Permission Matrix: [Domain admin - {ACCESS - ALL Containers}, Org founder/Owner? , User -{Can access only his containers} ] Authorization: JWT UBT token.",
        "operationId": "getContainersUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "name": "type",
            "in": "query",
            "description": "type",
            "required": false,
            "type": "string"
          },
          {
            "name": "name",
            "in": "query",
            "description": "name",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset into the table",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Page Size",
            "required": false,
            "type": "integer",
            "default": 100,
            "format": "int32"
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "property to sort by",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortDir",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Page«ContainerTO»"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "post": {
        "tags": [
          "container-rest-manager"
        ],
        "summary": "Save a container",
        "description": "Create a container. Permission Matrix: [Domain admin - {Only domain admin} ] Authorization: JWT UBT token.",
        "operationId": "saveUsingPOST_3",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "container",
            "description": "container",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ContainerTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/Container/Users/": {
      "get": {
        "tags": [
          "container-rest-manager"
        ],
        "summary": "Get users list",
        "description": "Get users list based on container type. Permission Matrix: [Domain admin - {Only domain admin}]. Authorization: JWT UBT token.",
        "operationId": "getUsersUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "name": "type",
            "in": "query",
            "description": "type",
            "required": false,
            "type": "string"
          },
          {
            "name": "firstname",
            "in": "query",
            "description": "firstname",
            "required": false,
            "type": "string"
          },
          {
            "name": "lastname",
            "in": "query",
            "description": "lastname",
            "required": false,
            "type": "string"
          },
          {
            "name": "username",
            "in": "query",
            "description": "username",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset into the table",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Page Size",
            "required": false,
            "type": "integer",
            "default": 100,
            "format": "int32"
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "property to sort by",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortDir",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/Container/{containerId}/Permission/{permissionId}/Users/": {
      "put": {
        "tags": [
          "bulk-container-permission-rest-manager"
        ],
        "summary": "Add a container-permission to the list of users",
        "description": "Adds a permission for a list of users to a container. Permission Matrix: [Domain admin - {Only domain admin}] Authorization: JWT UBT token.",
        "operationId": "addPermissionToUsersUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "name": "containerId",
            "in": "path",
            "description": "containerId",
            "required": true,
            "type": "string"
          },
          {
            "name": "permissionId",
            "in": "path",
            "description": "permissionId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "pGuids",
            "description": "pGuids",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "delete": {
        "tags": [
          "bulk-container-permission-rest-manager"
        ],
        "summary": "Delete list of users from the container with given permission",
        "description": "Removes a permission for the list of users. userPermission Matrix: [Domain admin - {Only domain admin}] Authorization: JWT UBT token.",
        "operationId": "removeUsersPermissionsUsingDELETE",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "name": "containerId",
            "in": "path",
            "description": "containerId",
            "required": true,
            "type": "string"
          },
          {
            "name": "permissionId",
            "in": "path",
            "description": "permissionId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "pGuids",
            "description": "pGuids",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/Container/{id}": {
      "get": {
        "tags": [
          "container-rest-manager"
        ],
        "summary": "Get a container",
        "description": "Get a Container. Permission Matrix: [Domain admin - {ACCESS - ALL Containers}, Org founder/Owner? , User -{Can access only his containers} ] Authorization: JWT UBT token.",
        "operationId": "getUsingGET_2",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "put": {
        "tags": [
          "container-rest-manager"
        ],
        "summary": "Update a container",
        "description": "Update a Container. Permission Matrix: [Domain admin - {Only Domain admin} ]. Authorization: JWT UBT token.",
        "operationId": "updateUsingPUT_2",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "container",
            "description": "container",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ContainerTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ContainerTO"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "delete": {
        "tags": [
          "container-rest-manager"
        ],
        "summary": "Delete a container",
        "description": "Delete a container object. Permission Matrix: [Domain admin - {Only Domain admin} ] Authorization: JWT UBT token.",
        "operationId": "deleteUsingDELETE_2",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/Container/{id}/Groups/": {
      "get": {
        "tags": [
          "container-rest-manager"
        ],
        "summary": "Get groups in the container",
        "description": "Get groups list based on container id. Permission Matrix: [Domain admin - {Only domain admin}]. Authorization: JWT UBT token.",
        "operationId": "getGroupsWithinContainerUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset into the table",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Page Size",
            "required": false,
            "type": "integer",
            "default": 100,
            "format": "int32"
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "property to sort by",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortDir",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PSGroupTO"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/Container/{id}/Permission": {
      "post": {
        "tags": [
          "container-level-permission-rest-manager"
        ],
        "summary": "Save a permission within container",
        "description": "Create a permission object within a container. Permission Matrix: [Domain admin - {Only domain admin}] Authorization: JWT UBT token.",
        "operationId": "savePermissionUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "permission",
            "description": "permission",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PermissionTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "put": {
        "tags": [
          "container-level-permission-rest-manager"
        ],
        "summary": "Update a permission ",
        "description": "Update a permission object within a container. Permission Matrix: [Domain admin - {Only domain admin}] Authorization: JWT UBT token.",
        "operationId": "updatePermissionUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "permission",
            "description": "permission",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PermissionTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/Container/{id}/Permission/": {
      "get": {
        "tags": [
          "container-level-permission-rest-manager"
        ],
        "summary": "Get all permissions in a container",
        "description": "Get all permission objects. Permission Matrix: [Domain admin - {Only domain admin}] Authorization: JWT UBT token.",
        "operationId": "getPermissionsUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset into the table",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Page Size",
            "required": false,
            "type": "integer",
            "default": 100,
            "format": "int32"
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "property to sort by",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortDir",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/Container/{id}/Permission/{permissionId}/": {
      "delete": {
        "tags": [
          "container-level-permission-rest-manager"
        ],
        "summary": "Delete a permission within a container",
        "description": "Delete a permission object within a container. Permission Matrix: [Domain admin - {Only domain admin}] Authorization: JWT UBT token.",
        "operationId": "deletePermissionUsingDELETE",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          },
          {
            "name": "permssionId",
            "in": "path",
            "description": "permssionId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/Container/{id}/Permission/{permissionId}/Groups/": {
      "get": {
        "tags": [
          "container-rest-manager"
        ],
        "summary": "Get groups in the container with given permission",
        "description": "Get groups list based on container id and permission id. Permission Matrix: [Domain admin - {Only domain admin}]. Authorization: JWT UBT token.",
        "operationId": "getGroupsWithinContainerPermissionUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          },
          {
            "name": "permssionId",
            "in": "path",
            "description": "permssionId",
            "required": true,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset into the table",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Page Size",
            "required": false,
            "type": "integer",
            "default": 100,
            "format": "int32"
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "property to sort by",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortDir",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PSGroupTO"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "put": {
        "tags": [
          "bulk-container-permission-rest-manager"
        ],
        "summary": "Add a container-permission to the list of groups",
        "description": "Adds a permission for a list of groups to a container. Permission Matrix: [Domain admin - {Only domain admin}] Authorization: JWT UBT token.",
        "operationId": "addPermissionToGroupsUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          },
          {
            "name": "permssionId",
            "in": "path",
            "description": "permssionId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "groupIds",
            "description": "groupIds",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "delete": {
        "tags": [
          "bulk-container-permission-rest-manager"
        ],
        "summary": "Delete list of groups from the container with given permission",
        "description": "Removes a permission for the list of groups. Permission Matrix: [Domain admin - {Only domain admin}] Authorization: JWT UBT token.",
        "operationId": "removeGroupsPermissionsUsingDELETE",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          },
          {
            "name": "permssionId",
            "in": "path",
            "description": "permssionId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "groupIds",
            "description": "groupIds",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/Container/{id}/Permission/{permissionId}/Users/": {
      "get": {
        "tags": [
          "container-rest-manager"
        ],
        "summary": "Get users in the container with given permission",
        "description": "Get users list based on container id and permission id. Permission Matrix: [Domain admin - {Only domain admin}]. Authorization: JWT UBT token.",
        "operationId": "getUsersWithinContainerPermissionUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          },
          {
            "name": "permssionId",
            "in": "path",
            "description": "permssionId",
            "required": true,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset into the table",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Page Size",
            "required": false,
            "type": "integer",
            "default": 100,
            "format": "int32"
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "property to sort by",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortDir",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ContainerUserTO"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/Container/{id}/Users/": {
      "get": {
        "tags": [
          "container-rest-manager"
        ],
        "summary": "Get users in the container",
        "description": "Get users list based on container id. Permission Matrix: [Domain admin - {Only domain admin}]. Authorization: JWT UBT token.",
        "operationId": "getUsersWithinContainerUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          },
          {
            "name": "firstname",
            "in": "query",
            "description": "firstname",
            "required": false,
            "type": "string"
          },
          {
            "name": "lastname",
            "in": "query",
            "description": "lastname",
            "required": false,
            "type": "string"
          },
          {
            "name": "username",
            "in": "query",
            "description": "username",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset into the table",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Page Size",
            "required": false,
            "type": "integer",
            "default": 100,
            "format": "int32"
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "property to sort by",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortDir",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "delete": {
        "tags": [
          "container-rest-manager"
        ],
        "summary": "Delete list of users from the container",
        "description": "Delete list of users from the container (i.e removes all permissions). Permission Matrix: [Domain admin - {Only domain admin}]. Authorization: JWT UBT token.",
        "operationId": "deleteUsersUsingDELETE",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "pGuids",
            "description": "pGuids",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/Container/{id}/Users/{pGuid}/Permission/": {
      "get": {
        "tags": [
          "container-rest-manager"
        ],
        "summary": "Get permissions list for a user",
        "description": "Get permissions list based on container id. Permission Matrix: [Domain admin - {Only domain admin}] Permission Matrix: [Domain admin - {Only domain admin}]. Authorization: JWT UBT token.",
        "operationId": "getPermissionsForUserUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          },
          {
            "name": "pGuid",
            "in": "path",
            "description": "pGuid",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/Countries": {
      "get": {
        "tags": [
          "countries-rest-manager"
        ],
        "summary": "Get platform supported countries",
        "description": "Get platform supported countries.",
        "operationId": "getCountriesUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/CustomCredential/": {
      "post": {
        "tags": [
          "custom-credentials-rest-manager"
        ],
        "summary": "Creates custom credentials session & issues authorization code. Authorization: Application Bearer Token (ABT)",
        "description": "Creates custom credentials session & issues authorization code. Client credentials bearer token needs to be passed in authorization header.",
        "operationId": "impersonationUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "requestObject",
            "description": "requestObject",
            "required": true,
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CustomCredentialsTO"
            }
          },
          "201": {
            "description": "Custom credential created",
            "schema": {
              "$ref": "#/definitions/CustomCredentialsTO"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "412": {
            "description": "Precondition Failed. User expired / user locked"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/DMAPAuthentication/": {
      "post": {
        "tags": [
          "dmap-authentication-rest-manager"
        ],
        "summary": "Verify user password",
        "description": "This end-point is used to authenticate the User from DMAP. OTHER APPS SHOUDLD NOT USE THIS END-POINT! Authorization: Application Bearer Token (ABT)",
        "operationId": "validatePasswordUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "dto",
            "description": "dto",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DmapAuthRequestDto"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User is valid",
            "schema": {
              "type": "object"
            }
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad request / Parsing error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          },
          "409": {
            "description": "Already exists"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/Discovery/Application/{clientId}": {
      "get": {
        "tags": [
          "discovery-rest-manager"
        ],
        "summary": "Get Service Details for clientID ",
        "description": "Get application metadata. Authorization: Application Bearer Token (ABT token)/User Bearer Token (UBT token)",
        "operationId": "getServiceDetailsForClientUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "name": "clientId",
            "in": "path",
            "description": "Client Id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "referer",
            "in": "query",
            "description": "referer",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "type": "object"
            }
          },
          "400": {
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/Discovery/Platform": {
      "get": {
        "tags": [
          "discovery-rest-manager"
        ],
        "summary": "Get platform url for a given enterprise",
        "description": "Get platform url for a given enterprise. Helps to route the enterprise to the appropriate location.",
        "operationId": "getPlatformUrlUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "domain",
            "in": "query",
            "description": "domain",
            "required": false,
            "type": "string"
          },
          {
            "name": "referer",
            "in": "query",
            "description": "referer",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/Domain/Global/{domainUID}": {
      "get": {
        "tags": [
          "domain-rest-manager"
        ],
        "summary": "Get domain information from platform cluster",
        "description": "Get domain information. ABT Bearer token gets information for any domain across geo.",
        "operationId": "getDomainInfoFromClusterUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "name": "domainUID",
            "in": "path",
            "description": "domainUID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/Domain/RunPasswordHistoryMigration": {
      "post": {
        "tags": [
          "domain-rest-manager"
        ],
        "summary": "Migrate Password",
        "description": "Platform API Key",
        "operationId": "migratePasswordHistory",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "apiKey",
            "in": "header",
            "description": "apiKey",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully Migrated",
            "schema": {
              "type": "object"
            }
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad request / Parsing error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/Domain/RunPasswordMigration": {
      "post": {
        "tags": [
          "domain-rest-manager"
        ],
        "summary": "Migrate Password",
        "description": "Platform API Key",
        "operationId": "migratePassword",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "apiKey",
            "in": "header",
            "description": "apiKey",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully Migrated",
            "schema": {
              "type": "object"
            }
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad request / Parsing error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/Domain/{domainUID}": {
      "get": {
        "tags": [
          "domain-rest-manager"
        ],
        "summary": "Get domain information",
        "description": "Get domain information. ABT Bearer token gets information for any domainUID. UBT gets domain info for the corresponding domain.",
        "operationId": "getUsingGET_3",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "name": "domainUID",
            "in": "path",
            "description": "domainUID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/Domain/{domainUID}/Organizations": {
      "get": {
        "tags": [
          "domain-rest-manager"
        ],
        "summary": "Gets organization list",
        "description": "Get Organization list for a the given domain. Authorization: ABT token",
        "operationId": "getOrganizationsUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "name": "domainUID",
            "in": "path",
            "description": "domainUID",
            "required": true,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset into the table",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Page Size",
            "required": false,
            "type": "integer",
            "default": 100,
            "format": "int32"
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "property to sort by",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortDir",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "List of Organizations",
            "schema": {
              "type": "object"
            }
          },
          "400": {
            "description": "Bad request / Parsing error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/Entitlement/Domain/{id}": {
      "get": {
        "tags": [
          "entitlement-rest-manager"
        ],
        "summary": "Get entitlements for a Domain",
        "description": "Get entitlements for a Domain. Use ABT JWT token for authorization - Refer: https://confluence.illumina.com/display/PLAT/Platform+JWT+tokens",
        "operationId": "getEntitlementsForDomainUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "An authorized ABT JWT bearer token (Only APP to APP token has access)",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a EntitlementList",
            "schema": {
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "post": {
        "tags": [
          "entitlement-rest-manager"
        ],
        "summary": "Create a Entitlement object.",
        "description": "Create a Entitlement object. Use ABT JWT token for authorization",
        "operationId": "saveEntitlementsForDomainUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "An authorized ABT JWT bearer token",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "Entitlement",
            "description": "Entitlement information to associate",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EntitlementTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful, no content returned",
            "schema": {
              "type": "object"
            }
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/Entitlement/User/{id}": {
      "get": {
        "tags": [
          "entitlement-rest-manager"
        ],
        "summary": "Get entitlements for a User",
        "description": "Get entitlements for a User. Use ABT JWT token for authorization",
        "operationId": "getEntitlementsForUserUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "An authorized ABT JWT bearer token (Only APP to APP token has access)",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a EntitlementList",
            "schema": {
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "post": {
        "tags": [
          "entitlement-rest-manager"
        ],
        "summary": "Create a Entitlement object.",
        "description": "Create a Entitlement object. Use ABT JWT token for authorization",
        "operationId": "saveEntitlementsForUserUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "An authorized ABT JWT bearer token",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "Entitlement",
            "description": "Entitlement information to associate",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EntitlementTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful, no content returned",
            "schema": {
              "type": "object"
            }
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/Entitlement/Workgroup/{id}": {
      "get": {
        "tags": [
          "entitlement-rest-manager"
        ],
        "summary": "Get entitlements for a workgroup",
        "description": "Get entitlements for a workgroup. Use ABT JWT token for authorization",
        "operationId": "getEntitlementsForWorkgroupUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "An authorized ABT JWT bearer token",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a EntitlementList",
            "schema": {
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "post": {
        "tags": [
          "entitlement-rest-manager"
        ],
        "summary": "Create a Entitlement object.",
        "description": "Create a Entitlement object. Use ABT JWT token for authorization",
        "operationId": "saveEntitlementsForWorkgroupUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "An authorized ABT JWT bearer token (Only APP to APP token has access)",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "Entitlement",
            "description": "Entitlement information to associate",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EntitlementTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful, no content returned",
            "schema": {
              "type": "object"
            }
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/Groups/": {
      "post": {
        "tags": [
          "groups-rest-manager"
        ],
        "summary": "Save group",
        "description": "Save group based on the bearer token's domain. Required fields:[name, description & applicationId]. Permission Matrix: [Domain admin - {ACCESS - For now only domain admin can create Orgs}, Org owner - {NO_ACCESS}, Org founder - {NO_ACCESS}, Org member - {NO_ACCESS}]. Authorization: User Bearer Token (aka: UBT/User psToken)",
        "operationId": "saveUsingPOST_4",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "group",
            "description": "group",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PSGroupTO"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PSGroupTO"
            }
          },
          "201": {
            "description": "Group created",
            "schema": {
              "$ref": "#/definitions/PSGroupTO"
            }
          },
          "400": {
            "description": "Bad request / Validation failed: Group name should not exceed 128 characters & should not be empty"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "406": {
            "description": "Not acceptable"
          },
          "409": {
            "description": "Duplicate group name"
          },
          "412": {
            "description": "Invalid domain"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "put": {
        "tags": [
          "groups-rest-manager"
        ],
        "summary": "Updates the group",
        "description": "Updates the group. Permission Matrix: [Domain admin - {ACCESS - For now only domain admin can create groups}.Authorization: User Bearer Token (aka: UBT/User psToken)",
        "operationId": "updateUsingPUT_3",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "group",
            "description": "group",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PSGroupTO"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Group updated",
            "schema": {
              "$ref": "#/definitions/PSGroupTO"
            }
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "406": {
            "description": "Not acceptable"
          },
          "409": {
            "description": "Duplicate group name"
          },
          "412": {
            "description": "Invalid domain"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/Groups/V2/{id}": {
      "get": {
        "tags": [
          "groups-rest-manager"
        ],
        "summary": "Get group by id",
        "description": "Get group information by id. Permission Matrix: Application Bearer token (aka: ABT) has access to this api.",
        "operationId": "getWithABTUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PSGroupTO"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/Groups/{groupId}/Permission/{id}": {
      "put": {
        "tags": [
          "groups-rest-manager"
        ],
        "summary": "Adds a permission to a group",
        "description": "Adds a permission to a group. Permission Matrix: [Domain admin - {Only domain admin}] Authorization: JWT UBT token.",
        "operationId": "addPermissionUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          },
          {
            "name": "groupId",
            "in": "path",
            "description": "groupId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "delete": {
        "tags": [
          "groups-rest-manager"
        ],
        "summary": "Removes a permission for a group",
        "description": "Removes a permission for a group. Permission Matrix: [Domain admin - {Only domain admin}] Authorization: JWT UBT token.",
        "operationId": "removePermissionUsingDELETE",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          },
          {
            "name": "groupId",
            "in": "path",
            "description": "groupId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/Groups/{id}": {
      "get": {
        "tags": [
          "groups-rest-manager"
        ],
        "summary": "Get group by id",
        "description": "Get group information by id. Permission Matrix: [Domain admin - {ACCESS - ANY groups}, Org owner - {ACCESS - ANY Group within his Org}, Org founder - {ACCESS - ANY Group within his Org}, Org member - {ACCESS - Only if he is part of the group}].Authorization: User Bearer Token (aka: UBT/User psToken)",
        "operationId": "getUsingGET_4",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PSGroupTO"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "delete": {
        "tags": [
          "groups-rest-manager"
        ],
        "summary": "DELETE Group",
        "description": "DELETE Group. Authorization: User Bearer Token (aka: UBT/User psToken). Permission Matrix: [Domain admin - {ACCESS - Only domain admin}].",
        "operationId": "deleteUsingDELETE_3",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/Groups/{id}/Users/": {
      "get": {
        "tags": [
          "groups-rest-manager"
        ],
        "summary": "Get users in the group",
        "description": "Get user list within the group. Permission Matrix: [Domain admin - {ACCESS - ANY groups}, Org owner - {ACCESS - ANY Group within his Org}, Org founder - {ACCESS - ANY Group within his Org}, Org member - {ACCESS - Only if he is part of the group}]. Authorization: User Bearer Token (aka: UBT/User psToken)",
        "operationId": "getUsersUsingGET_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          },
          {
            "name": "firstname",
            "in": "query",
            "description": "firstname",
            "required": false,
            "type": "string"
          },
          {
            "name": "lastname",
            "in": "query",
            "description": "lastname",
            "required": false,
            "type": "string"
          },
          {
            "name": "username",
            "in": "query",
            "description": "username",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset into the table",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Page Size",
            "required": false,
            "type": "integer",
            "default": 100,
            "format": "int32"
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "property to sort by",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortDir",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/Groups/{id}/Users/{username}/": {
      "get": {
        "tags": [
          "groups-rest-manager"
        ],
        "summary": "Get user information",
        "description": "Get user information for the user who is in the group. Authorization: User Bearer Token (aka: UBT/User psToken)",
        "operationId": "getUserUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          },
          {
            "name": "username",
            "in": "path",
            "description": "username",
            "required": true,
            "type": "string"
          },
          {
            "name": "collaboratorType",
            "in": "query",
            "description": "collaboratorType",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UserTO"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "put": {
        "tags": [
          "groups-rest-manager"
        ],
        "summary": "Adds user to the group",
        "description": "Adds user to the group. Permission Matrix: [Domain admin - {ACCESS - ANY groups}, Org owner - {ACCESS - ANY Group within his Org}, Org founder - {ACCESS - ANY Group within his Org}, Org member - {NO_ACCESS}]. Authorization: User Bearer Token (aka: UBT/User psToken)",
        "operationId": "addUserUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          },
          {
            "name": "username",
            "in": "path",
            "description": "username",
            "required": true,
            "type": "string"
          },
          {
            "name": "collaboratorType",
            "in": "query",
            "description": "collaboratorType",
            "required": false,
            "type": "string"
          },
          {
            "name": "collaborationDomain",
            "in": "query",
            "description": "collaborationDomain",
            "required": false,
            "type": "string"
          },
          {
            "name": "landingPageUrl",
            "in": "query",
            "description": "landingPageUrl",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "delete": {
        "tags": [
          "groups-rest-manager"
        ],
        "summary": "Delete an user from the group",
        "description": "Delete an user from the group. Authorization: [Domain admin, Org owner & founder]. Authorization: User Bearer Token (aka: UBT/User psToken)",
        "operationId": "removeUserUsingDELETE",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          },
          {
            "name": "username",
            "in": "path",
            "description": "username",
            "required": true,
            "type": "string"
          },
          {
            "name": "collaboratorType",
            "in": "query",
            "description": "collaboratorType",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/Impersonation/": {
      "post": {
        "tags": [
          "impersonation-rest-manager"
        ],
        "summary": "Creates impersonation session.",
        "description": "Creates impersonation session. Authorization: Application Bearer Token (ABT) needs to be passed in authorization header.",
        "operationId": "impersonationUsingPOST_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "requestObject",
            "description": "requestObject",
            "required": true,
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "201": {
            "description": "Impersonation session created",
            "schema": {
              "type": "object"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "429": {
            "description": "Too Many Requests"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/Impersonation/Search": {
      "get": {
        "tags": [
          "impersonation-rest-manager"
        ],
        "summary": "Search impersonation history",
        "description": "Search impersonation history logs Authorization: User Bearer Token (UBT)",
        "operationId": "searchUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "domain",
            "in": "query",
            "description": "domain",
            "required": true,
            "type": "string"
          },
          {
            "name": "username",
            "in": "query",
            "description": "username",
            "required": false,
            "type": "string"
          },
          {
            "name": "impersonatedUsername",
            "in": "query",
            "description": "impersonatedUsername",
            "required": false,
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "type": "object"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/JWT/Token": {
      "get": {
        "tags": [
          "jwt-rest-manager"
        ],
        "summary": "Get JWT token",
        "description": "Get JWT token for the given payload (psToken & clientId)",
        "operationId": "getJWTTokenUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "clientSecret",
            "in": "query",
            "description": "clientSecret",
            "required": true,
            "type": "string"
          },
          {
            "name": "psToken",
            "in": "query",
            "description": "psToken",
            "required": true,
            "type": "string"
          },
          {
            "name": "clientId",
            "in": "query",
            "description": "clientId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/JWT/Token/{clientId}": {
      "get": {
        "tags": [
          "jwt-rest-manager"
        ],
        "summary": "Get JWT token",
        "description": "Generates JWT token for the clientId. Can be used for app-app calls. expiresIn=-1 never expires. Authorization: ABT Token",
        "operationId": "generateJWTTokenUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "name": "expiresInSeconds",
            "in": "query",
            "description": "expiresInSeconds",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "payLoad",
            "in": "query",
            "description": "payLoad",
            "required": false,
            "type": "string"
          },
          {
            "name": "clientId",
            "in": "path",
            "description": "clientId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/Microservices": {
      "get": {
        "tags": [
          "rest-manager"
        ],
        "summary": "getMicroservices",
        "operationId": "getMicroservicesUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/Microservices/{clientId}": {
      "get": {
        "tags": [
          "rest-manager"
        ],
        "summary": "getMicroserviceDataForClient",
        "operationId": "getMicroserviceDataForClientUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "clientId",
            "in": "path",
            "description": "clientId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/NotificationRule/": {
      "get": {
        "tags": [
          "notification-rule-rest-manager"
        ],
        "summary": "Get `NotificationRule` list registered with platform.",
        "description": "Get `NotificationRule` list registered with platform. Use ABT JWT token for authorization - Refer: https://confluence.illumina.com/display/PLAT/Platform+JWT+tokens",
        "operationId": "getNotificationRuleUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "An authorized ABT JWT bearer token (Only APP to APP token has access)",
            "required": true,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset into the table",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Page Size",
            "required": false,
            "type": "integer",
            "default": 100,
            "format": "int32"
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "property to sort by",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortDir",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "201": {
            "description": "Returns a list of NotificationRule registered with platform by a particular application",
            "schema": {
              "type": "object"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "post": {
        "tags": [
          "notification-rule-rest-manager"
        ],
        "summary": "Create a `NotificationRule` object.",
        "description": "Create a `NotificationRule` object. Use ABT JWT token for authorization - Refer: https://confluence.illumina.com/display/PLAT/Platform+JWT+tokens",
        "operationId": "saveNotificationRuleUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "An authorized ABT JWT bearer token (Only APP to APP token has access)",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "NotificationRule",
            "description": "NotificationRule information to create",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/NotificationRuleTO"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Unexpected error",
            "schema": {
              "type": "object"
            }
          },
          "201": {
            "description": "Returns a NotificationRule",
            "schema": {
              "type": "object"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict - Duplicate NotificationRule"
          }
        }
      }
    },
    "/NotificationRule/{id}": {
      "get": {
        "tags": [
          "notification-rule-rest-manager"
        ],
        "summary": "Get a `NotificationRule`.",
        "description": "Get a `NotificationRule`. Use ABT JWT token for authorization - Refer: https://confluence.illumina.com/display/PLAT/Platform+JWT+tokens",
        "operationId": "getUsingGET_5",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "An authorized ABT JWT bearer token (Only APP to APP token has access)",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "NotificationRule Id.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Unexpected error",
            "schema": {
              "type": "object"
            }
          },
          "201": {
            "description": "Returns a NotificationRule",
            "schema": {
              "type": "object"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict - Duplicate NotificationRule"
          }
        }
      },
      "put": {
        "tags": [
          "notification-rule-rest-manager"
        ],
        "summary": "Update a `NotificationRule`.",
        "description": "Update a `NotificationRule`. Use ABT JWT token for authorization - Refer: https://confluence.illumina.com/display/PLAT/Platform+JWT+tokens",
        "operationId": "updateNotificationRuleUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "An authorized ABT JWT bearer token (Only APP to APP token has access)",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "NotificationRule Id.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "NotificationRule",
            "description": "NotificationRule information to update",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/NotificationRuleTO"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Unexpected error",
            "schema": {
              "type": "object"
            }
          },
          "201": {
            "description": "Returns a NotificationRule",
            "schema": {
              "type": "object"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict - Duplicate NotificationRule"
          }
        }
      },
      "delete": {
        "tags": [
          "notification-rule-rest-manager"
        ],
        "summary": "Delete a `NotificationRule`.",
        "description": "Delete a `NotificationRule`. Use ABT JWT token for authorization - Refer: https://confluence.illumina.com/display/PLAT/Platform+JWT+tokens",
        "operationId": "deleteUsingDELETE_4",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "An authorized ABT JWT bearer token (Only APP to APP token has access)",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "NotificationRule Id.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Unexpected error",
            "schema": {
              "type": "object"
            }
          },
          "201": {
            "description": "Returns a NotificationRule",
            "schema": {
              "type": "object"
            }
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/NotificationTemplates/": {
      "get": {
        "tags": [
          "notification-template-rest-manager"
        ],
        "summary": "Get the list of created Notification Templates",
        "description": "Retrieves roles list registered by the application. Authorization: JWT APP bearer token, Refer: https://confluence.illumina.com/display/PLAT/Platform+JWT+tokens",
        "operationId": "getTemplates",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset into the table",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "property to sort by",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortDir",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "List of Templates",
            "schema": {
              "type": "object"
            }
          },
          "400": {
            "description": "Bad request / Parsing error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "post": {
        "tags": [
          "notification-template-rest-manager"
        ],
        "summary": "Create notification template for the application",
        "description": "Authorization: JWT APP bearer token, Refer: https://confluence.illumina.com/display/PLAT/Platform+JWT+tokens",
        "operationId": "createTemplate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "notificationEmailTemplateTO",
            "description": "notificationEmailTemplateTO",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NotificationEmailTemplateTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Created Notification template",
            "schema": {
              "type": "object"
            }
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad request / Parsing error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          },
          "409": {
            "description": "Conflict - Duplicate NotificationTemplate"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/NotificationTemplates/{id}": {
      "get": {
        "tags": [
          "notification-template-rest-manager"
        ],
        "summary": "Get a `NotificationTemplate`.",
        "description": "Get a `NotificationTemplate`. Use ABT JWT token for authorization - Refer: https://confluence.illumina.com/display/PLAT/Platform+JWT+tokens",
        "operationId": "getUsingGET_6",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "An authorized ABT JWT bearer token (Only APP to APP token has access)",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "NotificationTemplate Id.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "201": {
            "description": "Returns a NotificationTemplate",
            "schema": {
              "type": "object"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Message Template Not found"
          },
          "409": {
            "description": "Conflict - Duplicate NotificationTemplate"
          },
          "500": {
            "description": "Unexpected error"
          }
        }
      },
      "put": {
        "tags": [
          "notification-template-rest-manager"
        ],
        "summary": "Update a `NotificationTemplate`.",
        "description": "Update a `NotificationTemplate`. Use ABT JWT token for authorization - Refer: https://confluence.illumina.com/display/PLAT/Platform+JWT+tokens",
        "operationId": "updateNotificationTemplateUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "An authorized ABT JWT bearer token (Only APP to APP token has access)",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "NotificationTemplate Id.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "NotificationTemplate",
            "description": "NotificationTemplate information to update",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NotificationEmailTemplateTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "201": {
            "description": "Returns a NotificationTemplate",
            "schema": {
              "type": "object"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict - Duplicate NotificationTemplate"
          },
          "500": {
            "description": "Unexpected error"
          }
        }
      },
      "delete": {
        "tags": [
          "notification-template-rest-manager"
        ],
        "summary": "Delete a `NotificationTemplate`.",
        "description": "Delete a `NotificationTemplate`. Use ABT JWT token for authorization - Refer: https://confluence.illumina.com/display/PLAT/Platform+JWT+tokens",
        "operationId": "deleteUsingDELETE_5",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "An authorized ABT JWT bearer token (Only APP to APP token has access)",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "NotificationTemplate Id.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "204": {
            "description": "Notification Template Deleted",
            "schema": {
              "type": "object"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Unexpected error"
          }
        }
      }
    },
    "/Notifications/": {
      "post": {
        "tags": [
          "notification-rest-manager"
        ],
        "summary": "Send an Email notification using a specific template",
        "description": "Authorization: JWT APP bearer token, Refer: https://confluence.illumina.com/display/PLAT/Platform+JWT+tokens",
        "operationId": "sendMail",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "requestTO",
            "description": "requestTO",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SendNotificationRequestTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Notification sent",
            "schema": {
              "type": "object"
            }
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad request / Parsing error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/Oauth/Applications": {
      "get": {
        "tags": [
          "o-auth-child-apps-rest-manager"
        ],
        "summary": "Get all child apps ",
        "description": "Get All ChildApps of the parent identified by ABT.  Authorization: Application Bearer Token (ABT)",
        "operationId": "getAllChildApplicationsUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "in": "query",
            "description": "name",
            "required": false,
            "type": "string"
          },
          {
            "name": "clientId",
            "in": "query",
            "description": "clientId",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset into the table",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Page Size",
            "required": false,
            "type": "integer",
            "default": 25,
            "format": "int32"
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "property to sort by",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortDir",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "type": "object"
            }
          },
          "400": {
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "post": {
        "tags": [
          "o-auth-child-apps-rest-manager"
        ],
        "summary": "Create a child app and associates to a parent app",
        "description": "Create ChildApp. Authorization: Application Bearer Token (ABT)",
        "operationId": "createChildApplicationUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "appTO",
            "description": "application",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ChildAppTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "201": {
            "description": "Child App Created",
            "schema": {
              "type": "object"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/Oauth/Applications/{clientId}": {
      "get": {
        "tags": [
          "o-auth-child-apps-rest-manager"
        ],
        "summary": "Get child app byId ",
        "description": "Get Child App details if it exists and belongs to this parent.  Authorization: Application Bearer Token (ABT)",
        "operationId": "getChildApplicationUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "name": "clientId",
            "in": "path",
            "description": "Client Id.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "type": "object"
            }
          },
          "400": {
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "put": {
        "tags": [
          "o-auth-child-apps-rest-manager"
        ],
        "summary": "Update a child app and associates to a parent app",
        "description": "Update ChildApp.  Authorization: Application Bearer Token (ABT)",
        "operationId": "updateChildApplicationUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "appTO",
            "description": "application",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ChildAppTO"
            }
          },
          {
            "name": "clientId",
            "in": "path",
            "description": "clientId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "201": {
            "description": "Child App Created",
            "schema": {
              "type": "object"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Bad Request"
          }
        }
      },
      "delete": {
        "tags": [
          "o-auth-child-apps-rest-manager"
        ],
        "summary": "Delete child app byId ",
        "description": "Remove Child App if exists and belongs to the parent (Parent app cannot be deleted). Authorization: Application Bearer Token (ABT)",
        "operationId": "removeChildApplicationUsingDELETE",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "name": "clientId",
            "in": "path",
            "description": "Client Id.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "204": {
            "description": "Subscription Plan Deleted",
            "schema": {
              "type": "object"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Unexpected error"
          }
        }
      }
    },
    "/OrganizationUtil/MigrateGroupsToRoles": {
      "put": {
        "tags": [
          "organization-util-rest-manager"
        ],
        "summary": "migrate BSSH/VIT roles",
        "description": "Migrate all users/workgroup owners with groups access to role",
        "operationId": "migrateUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "apiKey",
            "in": "header",
            "description": "apiKey",
            "required": true,
            "type": "string"
          },
          {
            "name": "roleIds",
            "in": "query",
            "description": "roleIds",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "userType",
            "in": "header",
            "description": "owners/users",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/OrganizationUtil/Organizations/{id}": {
      "get": {
        "tags": [
          "organization-util-rest-manager"
        ],
        "summary": "Get Organization by id",
        "description": "Get Organization by id. Permission Matrix: ABT token. Authorization: Application Bearer Token (ABT)",
        "operationId": "getUsingGET_7",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/OrganizationTO"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/OrganizationUtil/Stats": {
      "get": {
        "tags": [
          "organization-util-rest-manager"
        ],
        "summary": "Get group/role user stats",
        "description": "ABT Bearer token confluence link:https://confluence.illumina.com/pages/viewpage.action?spaceKey=PLAT&focusedCommentId=106268155&title=Application+to+Application+Platform+Security",
        "operationId": "getStatsUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "name": "strategy",
            "in": "query",
            "description": "strategy ( roles or groups ). By default groups",
            "required": false,
            "type": "string"
          },
          {
            "name": "roleId",
            "in": "query",
            "description": "roleId --> for strategy roles",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/Organizations/": {
      "get": {
        "tags": [
          "organizations-rest-manager"
        ],
        "summary": "Gets organization list",
        "description": "Get Organization list for the current logged in user. Permission Matrix: [Domain admin - {ACCESS - ALL Orgs}, Org owner - { ACCESS - Only his Orgs }, Org founder - {ACCESS - Only his Orgs}, Org member - {ACCESS - Only the Orgs which he is part of}] Authorization: User Bearer Token (aka: UBT/User psToken)",
        "operationId": "getOrganizationsUsingGET_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "name": "strategy",
            "in": "query",
            "description": "strategy ( roles or groups ). By default groups",
            "required": false,
            "type": "string"
          },
          {
            "name": "isOwner",
            "in": "query",
            "description": "isOwner - only applicable for roles strategy",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "isAdmin",
            "in": "query",
            "description": "isAdmin - only applicable for roles strategy",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "name",
            "in": "query",
            "description": "name",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset into the table",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Page Size",
            "required": false,
            "type": "integer",
            "default": 100,
            "format": "int32"
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "property to sort by",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortDir",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "post": {
        "tags": [
          "organizations-rest-manager"
        ],
        "summary": "Save an organization",
        "description": "Save an organization based on the bearer token's domain. Required fields: ( name, description, founderId, ownerId & applicationId). Permission Matrix: [Domain admin - {ACCESS - For now only domain admin can create Orgs}, Org owner - {NO_ACCESS}, Org founder - {NO_ACCESS}, Org member - {NO_ACCESS}]. Authorization: User Bearer Token (aka: UBT/User psToken)",
        "operationId": "saveUsingPOST_5",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "organization",
            "description": "organization",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OrganizationTO"
            }
          },
          {
            "name": "landingPageUrl",
            "in": "query",
            "description": "landingPageUrl",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/OrganizationTO"
            }
          },
          "201": {
            "description": "Organization created",
            "schema": {
              "$ref": "#/definitions/OrganizationTO"
            }
          },
          "400": {
            "description": "Validation failed: Organization name, description, founder & applicationId  cannot be empty"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "406": {
            "description": "Cannot create organization with the name: Default. Since its reserved."
          },
          "409": {
            "description": "Duplicate Organization name"
          },
          "412": {
            "description": "Invalid domain"
          },
          "429": {
            "description": "Too many organizations create requests. Only limited organizations can be created an user."
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "put": {
        "tags": [
          "organizations-rest-manager"
        ],
        "summary": "Updates an organization",
        "description": "Updates an organization. Permission Matrix: [Domain admin - {ACCESS - ALL Orgs}, Org owner - { ACCESS - Only his Orgs }, Org founder - {ACCESS - Only his Orgs}, Org member - {NO_ACCESS}] Authorization: User Bearer Token (aka: UBT/User psToken)",
        "operationId": "updateUsingPUT_4",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "organization",
            "description": "organization",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OrganizationTO"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Organization updated",
            "schema": {
              "$ref": "#/definitions/OrganizationTO"
            }
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "ApplicationId mismatch"
          },
          "404": {
            "description": "Not Found"
          },
          "406": {
            "description": "Cannot create organization with the name: Default. Since its reserved."
          },
          "409": {
            "description": "Duplicate Organization name"
          },
          "412": {
            "description": "Invalid domain"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/Organizations/{OrgId}/Admin/Users": {
      "get": {
        "tags": [
          "organization-roles-rest-manager"
        ],
        "summary": "Get workgroup admins",
        "description": "Authorization: JWT UBT token. Permission matrix: [Domain admin, workgroup admins].",
        "operationId": "getWorkGroupAdmins",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "OrgId",
            "in": "path",
            "description": "OrgId",
            "required": true,
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "type": "object"
            }
          },
          "400": {
            "description": "Bad request / Parsing error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "put": {
        "tags": [
          "organization-roles-rest-manager"
        ],
        "summary": "Assign Workgroup admin role",
        "description": "Authorization: JWT UBT token. Permission matrix: [Domain admin].",
        "operationId": "addWorkGroupAdmin",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "emailIds",
            "description": "emailIds",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "OrgId",
            "in": "path",
            "description": "OrgId",
            "required": true,
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "name": "collaboratorType",
            "in": "query",
            "description": "collaboratorType",
            "required": false,
            "type": "string"
          },
          {
            "name": "collaborationDomain",
            "in": "query",
            "description": "collaborationDomain",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Updated",
            "schema": {
              "type": "object"
            }
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad request / Parsing error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "delete": {
        "tags": [
          "organization-roles-rest-manager"
        ],
        "summary": "Revoke Role workgroup admin role",
        "description": "Authorization: JWT UBT token. Permission matrix: [Domain admin].",
        "operationId": "removeWorkGroupAdmin",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "emailIds",
            "description": "emailIds",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "OrgId",
            "in": "path",
            "description": "OrgId",
            "required": true,
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "name": "collaboratorType",
            "in": "query",
            "description": "collaboratorType",
            "required": false,
            "type": "string"
          },
          {
            "name": "collaborationDomain",
            "in": "query",
            "description": "collaborationDomain",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "204": {
            "description": "deleted",
            "schema": {
              "type": "object"
            }
          },
          "400": {
            "description": "Bad request / Parsing error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/Organizations/{OrgId}/Roles/{id}/Users": {
      "put": {
        "tags": [
          "organization-roles-rest-manager"
        ],
        "summary": "Assign role",
        "description": "Authorization: JWT UBT token. Bulk role provisioning. Permission matrix: [Domain admin, user with Workgroup admin role, founder & owner]",
        "operationId": "addUserRole",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "emailIds",
            "description": "emailIds",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "OrgId",
            "in": "path",
            "description": "OrgId",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "name": "collaboratorType",
            "in": "query",
            "description": "collaboratorType",
            "required": false,
            "type": "string"
          },
          {
            "name": "collaborationDomain",
            "in": "query",
            "description": "collaborationDomain",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Updated",
            "schema": {
              "type": "object"
            }
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad request / Parsing error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "delete": {
        "tags": [
          "organization-roles-rest-manager"
        ],
        "summary": "Remove Role",
        "description": "Authorization: JWT UBT token.Permission matrix: [Domain admin, user with Workgroup admin role, founder & owner].",
        "operationId": "removeUserRole",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "emailIds",
            "description": "emailIds",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "OrgId",
            "in": "path",
            "description": "OrgId",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "name": "collaboratorType",
            "in": "query",
            "description": "collaboratorType",
            "required": false,
            "type": "string"
          },
          {
            "name": "collaborationDomain",
            "in": "query",
            "description": "collaborationDomain",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "204": {
            "description": "deleted",
            "schema": {
              "type": "object"
            }
          },
          "400": {
            "description": "Bad request / Parsing error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/Organizations/{OrgId}/Users/{pGuid}": {
      "get": {
        "tags": [
          "organization-roles-rest-manager"
        ],
        "summary": "Get user details for a user within the org",
        "description": "Authorization: JWT UBT token.",
        "operationId": "getUserDetails",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "OrgId",
            "in": "path",
            "description": "OrgId",
            "required": true,
            "type": "string"
          },
          {
            "name": "pGuid",
            "in": "path",
            "description": "pGuid",
            "required": true,
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "List of users",
            "schema": {
              "type": "object"
            }
          },
          "400": {
            "description": "Bad request / Parsing error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/Organizations/{OrgId}/Users/{pGuid}/Roles/": {
      "get": {
        "tags": [
          "organization-roles-rest-manager"
        ],
        "summary": "Get User Roles",
        "description": "Authorization: JWT UBT token. Get User Roles. Permission matrix: [Domain admin, Workgroup admin, owner and founder - can get any users roles. Member -> Only their Roles]",
        "operationId": "getUserRoles",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "pGuid",
            "in": "path",
            "description": "pGuid",
            "required": true,
            "type": "string"
          },
          {
            "name": "OrgId",
            "in": "path",
            "description": "OrgId",
            "required": true,
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "List of Roles",
            "schema": {
              "type": "object"
            }
          },
          "400": {
            "description": "Bad request / Parsing error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/Organizations/{id}": {
      "get": {
        "tags": [
          "organizations-rest-manager"
        ],
        "summary": "Get Organization by id",
        "description": "Get Organization by id. Permission Matrix: [Domain admin - {ACCESS - ALL Orgs}, Org owner - { ACCESS - Only his Orgs }, Org founder - {ACCESS - Only his Orgs},Workgroup Admin - {ACCESS - Only his Orgs}, Org member - {ACCESS - Only his Orgs}] Authorization: User Bearer Token (aka: UBT/User psToken)",
        "operationId": "getUsingGET_8",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          },
          {
            "name": "strategy",
            "in": "query",
            "description": "strategy ( roles or groups ). By default groups",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/OrganizationTO"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "delete": {
        "tags": [
          "organizations-rest-manager"
        ],
        "summary": "DELETE Organization",
        "description": "DELETE Organization. Permission Matrix: [Domain admin - {ACCESS - For now only domain admin}, Org owner - {NO_ACCESS}, Org founder - {NO_ACCESS}, Org member - {NO_ACCESS}]. Authorization: User Bearer Token (aka: UBT/User psToken)",
        "operationId": "deleteUsingDELETE_7",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/Organizations/{id}/Groups/": {
      "get": {
        "tags": [
          "organizations-rest-manager"
        ],
        "summary": "Get groups within the organization",
        "description": "Get groups within the organization. (Only the group which the user has access). Permission Matrix: [Domain admin - {ACCESS - All groups}, Org owner - {ACCESS - ALL groups but Only his Orgs}, Org founder - {ACCESS - ALL groups but Only his Orgs}, Org member - {ACCESS - ALL Groups, if the user is part of the Org}]. Authorization: User Bearer Token (aka: UBT/User psToken)",
        "operationId": "getGroupsWithInOrganizationUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset into the table",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Page Size",
            "required": false,
            "type": "integer",
            "default": 100,
            "format": "int32"
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "property to sort by",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortDir",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "post": {
        "tags": [
          "organizations-rest-manager"
        ],
        "summary": "Save a group within the organization",
        "description": "Save a group within the organization. Required fields:[name, description & applicationId].  Permission Matrix: [Domain admin - {ACCESS - Only domain admin}]. Authorization: User Bearer Token (aka: UBT/User psToken)",
        "operationId": "saveGroupUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "group",
            "description": "group",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PSGroupTO"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PSGroupTO"
            }
          },
          "201": {
            "description": "Group created",
            "schema": {
              "$ref": "#/definitions/PSGroupTO"
            }
          },
          "400": {
            "description": "Bad request / Duplicate group"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "406": {
            "description": "Validation failed: Group name should not exceed 128 characters & should not be empty"
          },
          "409": {
            "description": "Duplicate group name"
          },
          "412": {
            "description": "Invalid domain"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/Organizations/{id}/Invites/": {
      "get": {
        "tags": [
          "organizations-rest-manager"
        ],
        "summary": "Gets invited users list",
        "description": "Get invited users for an Organization. Authorization: User Bearer Token (aka: UBT/User psToken)",
        "operationId": "getInvitedUsersUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          },
          {
            "name": "invitationStatus",
            "in": "query",
            "description": "invitationStatus",
            "required": false,
            "type": "string"
          },
          {
            "name": "strategy",
            "in": "query",
            "description": "strategy ( roles or groups ). By default groups",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset into the table",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Page Size",
            "required": false,
            "type": "integer",
            "default": 100,
            "format": "int32"
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "property to sort by",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortDir",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/Organizations/{id}/OrgUser/{pGuid}": {
      "get": {
        "tags": [
          "organizations-rest-manager"
        ],
        "summary": "Gets user",
        "description": "Returns userobj. Strategy: ROLES: Checks if a user has atleast one role within the org. GROUPS: Checks if user atleast user is part of a group. With both strategies, if pGuid is founder/owner it will be returned. Authorization: Application Bearer Token (aka: ABT token) ",
        "operationId": "getInvitedUsersUsingGET_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          },
          {
            "name": "pGuid",
            "in": "path",
            "description": "pGuid",
            "required": true,
            "type": "string"
          },
          {
            "name": "strategy",
            "in": "query",
            "description": "strategy ( roles or groups ). By default groups",
            "required": false,
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "User Obj returned.",
            "schema": {
              "type": "object"
            }
          },
          "400": {
            "description": "Invalid request. Organization Id / pGuid invalid"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "User not found in the organization"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/Organizations/{id}/Users": {
      "delete": {
        "tags": [
          "organization-roles-rest-manager"
        ],
        "summary": "DELETE users from workgroup",
        "description": "Authorization: JWT UBT token. Remove the list of users from workgroup (Revoke all roles for users for workgroup). Permission matrix: [Org owner/founder, Org admin or domain admin - {Only the above users has access}]",
        "operationId": "removeUsersInOrgUsingDELETE",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "emailIds",
            "description": "emailIds",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          },
          {
            "name": "isRemoveWorkGroupAdministrator",
            "in": "query",
            "description": "true/false Default: false",
            "required": false,
            "type": "string",
            "default": "false"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/Organizations/{id}/Users/": {
      "get": {
        "tags": [
          "organizations-rest-manager"
        ],
        "summary": "Get users list within the organization).",
        "description": "Get users list within the organization. Permission Matrix: [Domain admin - {ACCESS - ANY groups}, Org owner - {ACCESS - Only his Orgs}, Org founder - {ACCESS - Only his Orgs}, Org member - {ACCESS - Only if the user is part of the Org}]. Authorization: User Bearer Token (aka: UBT/User psToken) OR Application Bearer Token (ABT token)",
        "operationId": "getUsersUsingGET_2",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "name": "strategy",
            "in": "query",
            "description": "strategy ( roles or groups ). By default groups",
            "required": false,
            "type": "string"
          },
          {
            "name": "firstname",
            "in": "query",
            "description": "firstname",
            "required": false,
            "type": "string"
          },
          {
            "name": "lastname",
            "in": "query",
            "description": "lastname",
            "required": false,
            "type": "string"
          },
          {
            "name": "username",
            "in": "query",
            "description": "username",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset into the table",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Page Size",
            "required": false,
            "type": "integer",
            "default": 100,
            "format": "int32"
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "property to sort by",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortDir",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/Permission/": {
      "get": {
        "tags": [
          "permission-rest-manager"
        ],
        "summary": "Get Permissions",
        "description": "Retrieves the Permission list registered by the application. Authorization: JWT APP bearer token, Refer: https://confluence.illumina.com/display/PLAT/Platform+JWT+tokens",
        "operationId": "getAllPermissionsUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "in": "query",
            "description": "name",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset into the table",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Page Size",
            "required": false,
            "type": "integer",
            "default": 25,
            "format": "int32"
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "property to sort by",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortDir",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "post": {
        "tags": [
          "permission-rest-manager"
        ],
        "summary": "Save a permission",
        "description": "Creates a Permission object. Authorization: JWT APP bearer token Refer: https://confluence.illumina.com/display/PLAT/Platform+JWT+tokens",
        "operationId": "saveUsingPOST_6",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "permission",
            "description": "permission",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PermissionTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/Permission/{id}": {
      "get": {
        "tags": [
          "permission-rest-manager"
        ],
        "summary": "Get a permission",
        "description": "Retrieves a Permission object. Authorization: JWT APP bearer token, Refer: https://confluence.illumina.com/display/PLAT/Platform+JWT+tokens",
        "operationId": "getUsingGET_9",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "put": {
        "tags": [
          "permission-rest-manager"
        ],
        "summary": "Update a permission",
        "description": "Updates the Permission Obj. Authorization: JWT APP bearer token, Refer: https://confluence.illumina.com/display/PLAT/Platform+JWT+tokens",
        "operationId": "updateUsingPUT_5",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "permission",
            "description": "permission",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PermissionTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "delete": {
        "tags": [
          "permission-rest-manager"
        ],
        "summary": "Delete a Permission",
        "description": "Delete the Permission Obj. Authorization: JWT APP bearer token, Refer: https://confluence.illumina.com/display/PLAT/Platform+JWT+tokens",
        "operationId": "deleteUsingDELETE_8",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/Roles/": {
      "get": {
        "tags": [
          "roles-rest-manager"
        ],
        "summary": "Get Roles defined for an Application",
        "description": "Retrieves roles list registered by the application. Authorization: JWT APP bearer token, Refer: https://confluence.illumina.com/display/PLAT/Platform+JWT+tokens and Platform Global admin token with imporsonization",
        "operationId": "getRoles_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "in": "query",
            "description": "name",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset into the table",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Page Size",
            "required": false,
            "type": "integer",
            "default": 25,
            "format": "int32"
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "property to sort by",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortDir",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "List of Roles",
            "schema": {
              "type": "object"
            }
          },
          "400": {
            "description": "Bad request / Parsing error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "post": {
        "tags": [
          "roles-rest-manager"
        ],
        "summary": "Register/Create a role for an app: Required field: name",
        "description": "Authorization: JWT APP bearer token, Refer: https://confluence.illumina.com/display/PLAT/Platform+JWT+tokens and Platform Global admin token with imporsonization",
        "operationId": "saveRole",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "roleTO",
            "description": "roleTO",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RoleTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "type": "object"
            }
          },
          "400": {
            "description": "Bad request / Parsing error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          },
          "409": {
            "description": "Already exists"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/Roles/Applications/": {
      "get": {
        "tags": [
          "roles-rest-manager"
        ],
        "summary": "Get Roles registered by all applications",
        "description": "Retrieves roles list registered by all the application. Authorization: JWT APP bearer token, Refer: https://confluence.illumina.com/display/PLAT/Platform+JWT+tokens and Platform Global admin token with imporsonization",
        "operationId": "getApplicationRoles",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "name": "domain",
            "in": "query",
            "description": "domain",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "List of Roles",
            "schema": {
              "type": "object"
            }
          },
          "400": {
            "description": "Bad request / Parsing error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/Roles/{id}": {
      "get": {
        "tags": [
          "roles-rest-manager"
        ],
        "summary": "Get Roles defined for an Application",
        "description": "Retrieves roles list registered by the application. Authorization: JWT APP bearer token, Refer: https://confluence.illumina.com/display/PLAT/Platform+JWT+tokens and Platform Global admin token with imporsonization",
        "operationId": "getRoles",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "List of Roles",
            "schema": {
              "type": "object"
            }
          },
          "400": {
            "description": "Bad request / Parsing error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "put": {
        "tags": [
          "roles-rest-manager"
        ],
        "summary": "Update role for an app",
        "description": "Authorization: JWT APP bearer token, Refer: https://confluence.illumina.com/display/PLAT/Platform+JWT+tokens and Platform Global admin token with imporsonization",
        "operationId": "updateRole",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "roleTO",
            "description": "roleTO",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RoleTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated",
            "schema": {
              "type": "object"
            }
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad request / Parsing error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "delete": {
        "tags": [
          "roles-rest-manager"
        ],
        "summary": "Delete Role for a given Application",
        "description": "Authorization: JWT APP bearer token, Refer: https://confluence.illumina.com/display/PLAT/Platform+JWT+tokens and Platform Global admin token with imporsonization",
        "operationId": "deleteRole",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "deleted",
            "schema": {
              "type": "object"
            }
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad request / Parsing error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/Session/": {
      "get": {
        "tags": [
          "o-auth-rest-manager"
        ],
        "summary": "Get the session details for the pGuid",
        "description": "Get the current user session details. Application Bearer token (aka: ABT) has access to this api.",
        "operationId": "searchUsingGET_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "name": "pGuid",
            "in": "query",
            "description": "pGuid",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "post": {
        "tags": [
          "o-auth-rest-manager"
        ],
        "summary": "Login: Perform authentication (Grant type: Password by default)",
        "description": "User authentication through platform. Current grant_types supported (password). User name & password should be sent in the header in the following format Authorization: Basic Base64ENCODED(username:password).",
        "operationId": "authenticateUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "requestObject",
            "description": "requestObject",
            "required": true,
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "name": "grant_type",
            "in": "header",
            "description": "grant_type",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/Session/ProxySession/{pSessionGuid}": {
      "get": {
        "tags": [
          "o-auth-rest-manager"
        ],
        "summary": "Get sessionGuid ",
        "description": "Get the session details based on sessionGuid distributed during validating the token. Authorization header: Client credentails bearer token",
        "operationId": "getProxySessionUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "name": "pSessionGuid",
            "in": "path",
            "description": "pSessionGuid",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/Session/v2/{access_token}": {
      "get": {
        "tags": [
          "o-auth-rest-manager"
        ],
        "summary": "Get the session details for the access_token",
        "description": "Get the current user session information by passing authorization header in the following format. Example: Authorization: Basic BASE64ENCODED(clientId:clientSecret). If you are not passing domain param, it will default to accounts domain",
        "operationId": "validateTokenV2UsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "access_token",
            "in": "path",
            "description": "access_token",
            "required": true,
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "name": "domain",
            "in": "header",
            "description": "domain",
            "required": false,
            "type": "string"
          },
          {
            "name": "clientId",
            "in": "query",
            "description": "clientId",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/Session/{access_token}": {
      "get": {
        "tags": [
          "o-auth-rest-manager"
        ],
        "summary": "Get the session details for the access_token",
        "description": "Get the current user session information by passing authorization header in the following format. Example: Authorization: Basic BASE64ENCODED(clientId:clientSecret). If you are not passing domain param, it will default to accounts domain",
        "operationId": "validateTokenUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "access_token",
            "in": "path",
            "description": "access_token",
            "required": true,
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "name": "domain",
            "in": "header",
            "description": "domain",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "delete": {
        "tags": [
          "o-auth-rest-manager"
        ],
        "summary": "Invalidate Token",
        "description": "Invalidates the session by passing authorization header in the following format. Example: Authorization: Basic BASE64ENCODED(clientId:clientSecret).",
        "operationId": "deleteUsingDELETE_6",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "access_token",
            "in": "path",
            "description": "access_token",
            "required": true,
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/SessionTracker/": {
      "put": {
        "tags": [
          "session-tracker-rest-manager"
        ],
        "summary": "Track User session",
        "description": "Tracks User Session. Authorization: UBT(User Bearer token)",
        "operationId": "trackSessionUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "name": "clientId",
            "in": "query",
            "description": "clientId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/SessionTracker/IsIdle": {
      "get": {
        "tags": [
          "session-tracker-rest-manager"
        ],
        "summary": "Check idle timeout",
        "description": "Check if the current user session has been idle timeout or not. Authorization: UBT(User Bearer token)",
        "operationId": "isIdleUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/Usage/Domain/{id}": {
      "post": {
        "tags": [
          "usage-rest-manager"
        ],
        "summary": "Create a `Usage` object for the domain",
        "description": "Create a `Usage` object for the domain. Use UBT JWT token for authorization - Refer: https://confluence.illumina.com/display/PLAT/Platform+JWT+tokens\n",
        "operationId": "saveUsageForDomainUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "An authorized UBT JWT bearer token",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "Usage",
            "description": "Usage information to create",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UsageTO"
              }
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/Usage/Organization/{id}": {
      "post": {
        "tags": [
          "usage-rest-manager"
        ],
        "summary": "Create a `Usage` object for the org.",
        "description": "Create a `Usage` object for the org. User consuming the billable entity within the Org. Use ABT JWT token for authorization - Refer: https://confluence.illumina.com/display/PLAT/Platform+JWT+tokens",
        "operationId": "saveUsingPOST_7",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "An authorized ABT JWT bearer token",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "Usage",
            "description": "Usage information to create",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UsageTO"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/Usage/User/{id}": {
      "post": {
        "tags": [
          "usage-rest-manager"
        ],
        "summary": "Create a `Usage` object.",
        "description": "Create a `Usage` object. User consuming the billable entity. Use ABT JWT token for authorization - Refer: https://confluence.illumina.com/display/PLAT/Platform+JWT+tokens",
        "operationId": "saveUsageForUserUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "An authorized ABT JWT bearer token",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "Usage",
            "description": "Usage information to create",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UsageTO"
              }
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/Users/": {
      "get": {
        "tags": [
          "users-rest-manager"
        ],
        "summary": "Search users ",
        "description": "Search users within the domain. Authorization: Application Bearer Token (ABT token)/User Bearer Token (UBT token)",
        "operationId": "getUsersUsingGET_3",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "name": "username",
            "in": "query",
            "description": "username",
            "required": true,
            "type": "string"
          },
          {
            "name": "domain",
            "in": "query",
            "description": "domain",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "post": {
        "tags": [
          "users-rest-manager"
        ],
        "summary": "Register a new user for the domain",
        "description": "Register a new user for the domain. Authorization: Application Bearer Token (ABT)",
        "operationId": "createUsingPOST_2",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "user",
            "description": "user",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserTO"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "name": "activationLink",
            "in": "header",
            "description": "activationLink",
            "required": true,
            "type": "string"
          },
          {
            "name": "skipEmail",
            "in": "query",
            "description": "skipEmail",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "put": {
        "tags": [
          "users-rest-manager"
        ],
        "summary": "Update user details for pGuid",
        "description": "Update user details for pGuid. Authorization: Application Bearer Token / user bearer token",
        "operationId": "updateUsingPUT_6",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "user",
            "description": "user",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UserTO"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/Users/Password/": {
      "put": {
        "tags": [
          "users-rest-manager"
        ],
        "summary": "Reset password",
        "description": "Resets the password for the key recieved by the user. Notification is sent to the user after successful password reset. Authorization: Application Bearer Token (ABT)",
        "operationId": "resetPasswordUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "name": "key",
            "in": "query",
            "description": "key",
            "required": true,
            "type": "string"
          },
          {
            "name": "domain",
            "in": "query",
            "description": "domain",
            "required": true,
            "type": "string"
          },
          {
            "name": "password",
            "in": "query",
            "description": "password",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/Users/Search": {
      "get": {
        "tags": [
          "users-rest-manager"
        ],
        "summary": "Users search api. Restrictions: rows = no of records (Maximum: 25 by default)",
        "description": "Users search api. Restrictions: rows = no of records (Maximum: 25 by default) Authorization: Application Bearer Token (ABT)",
        "operationId": "searchUsingGET_3",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "name": "domain",
            "in": "query",
            "description": "domain",
            "required": true,
            "type": "string"
          },
          {
            "name": "rows",
            "in": "query",
            "description": "rows",
            "required": true,
            "type": "string"
          },
          {
            "name": "start",
            "in": "query",
            "description": "start",
            "required": true,
            "type": "string"
          },
          {
            "name": "username",
            "in": "query",
            "description": "username",
            "required": false,
            "type": "string"
          },
          {
            "name": "firstname",
            "in": "query",
            "description": "firstname",
            "required": false,
            "type": "string"
          },
          {
            "name": "lastname",
            "in": "query",
            "description": "lastname",
            "required": false,
            "type": "string"
          },
          {
            "name": "company",
            "in": "query",
            "description": "company",
            "required": false,
            "type": "string"
          },
          {
            "name": "countrycode",
            "in": "query",
            "description": "countrycode",
            "required": false,
            "type": "string"
          },
          {
            "name": "title",
            "in": "query",
            "description": "title",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/Users/V2/{pGuid}/Password/": {
      "post": {
        "tags": [
          "users-rest-manager"
        ],
        "summary": "Reset password",
        "description": "Resets the password for the key recieved by the user. Notification is sent to the user after successful password reset. Authorization: Application Bearer Token (ABT) / user bearer token",
        "operationId": "resetPasswordByUserV2UsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "passwordTO",
            "description": "passwordTO",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PasswordTO"
            }
          },
          {
            "name": "pGuid",
            "in": "path",
            "description": "pGuid",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/Users/resend/": {
      "post": {
        "tags": [
          "users-rest-manager"
        ],
        "summary": "resendConfirmation",
        "operationId": "resendConfirmationUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "requestObject",
            "description": "requestObject",
            "required": true,
            "schema": {
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/Users/verifyEmailAddress": {
      "post": {
        "tags": [
          "users-rest-manager"
        ],
        "summary": "Activates the user",
        "description": "Activates the registered user. Authorization: Application Bearer Token (ABT).",
        "operationId": "verifyEmailAddressUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "key",
            "in": "query",
            "description": "key",
            "required": true,
            "type": "string"
          },
          {
            "name": "domain",
            "in": "query",
            "description": "domain",
            "required": true,
            "type": "string"
          },
          {
            "name": "defaultHomePageUrl",
            "in": "query",
            "description": "defaultHomePageUrl",
            "required": true,
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UserTO"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/Users/{pGuid}": {
      "get": {
        "tags": [
          "users-rest-manager"
        ],
        "summary": "Get user details for pGuid",
        "description": "Get user details for the given pGuid. Authorization: Application Bearer Token (ABT) OR UBT(psToken) of Domain Admin",
        "operationId": "getUsingGET_13",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "name": "pGuid",
            "in": "path",
            "description": "pGuid",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UserTO"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "delete": {
        "tags": [
          "users-rest-manager"
        ],
        "summary": "Disable the user",
        "description": "Disable the user. Authorization: Application Bearer Token (ABT)",
        "operationId": "disableUserUsingDELETE",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "name": "pGuid",
            "in": "path",
            "description": "pGuid",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/Users/{pGuid}/Container/": {
      "get": {
        "tags": [
          "users-rest-manager"
        ],
        "summary": "Get containers for a user",
        "description": "Get list of containers which an user has access to. Permission Matrix: [User - {Only his containers}] Authorization: JWT UBT Token",
        "operationId": "getContainersUsingGET_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "name": "pGuid",
            "in": "path",
            "description": "pGuid",
            "required": true,
            "type": "string"
          },
          {
            "name": "type",
            "in": "query",
            "description": "type",
            "required": false,
            "type": "string"
          },
          {
            "name": "name",
            "in": "query",
            "description": "name",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset into the table",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Page Size",
            "required": false,
            "type": "integer",
            "default": 100,
            "format": "int32"
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "property to sort by",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortDir",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/Users/{pGuid}/Groups/": {
      "get": {
        "tags": [
          "users-rest-manager"
        ],
        "summary": "Gets groups",
        "description": "Get groups list for the user Authorization: User Bearer Token (UBT)",
        "operationId": "getGroupsUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "name": "pGuid",
            "in": "path",
            "description": "pGuid",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "in": "query",
            "description": "name",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset into the table",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Page Size",
            "required": false,
            "type": "integer",
            "default": 100,
            "format": "int32"
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "property to sort by",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortDir",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/Users/{pGuid}/IOrgs/": {
      "get": {
        "tags": [
          "users-rest-manager"
        ],
        "summary": "Get organizations with ABT token",
        "description": "Get organizations for the user. Authorization: Application Bearer Token (ABT)",
        "operationId": "getOrganizationsWithABTUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "name": "pGuid",
            "in": "path",
            "description": "pGuid",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "in": "query",
            "description": "name",
            "required": false,
            "type": "string"
          },
          {
            "name": "strategy",
            "in": "query",
            "description": "strategy ( roles or groups ). By default groups",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset into the table",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Page Size",
            "required": false,
            "type": "integer",
            "default": 100,
            "format": "int32"
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "property to sort by",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortDir",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/Users/{pGuid}/OrgRoles/": {
      "get": {
        "tags": [
          "users-rest-manager"
        ],
        "summary": "Gets organizations with roles",
        "description": "Get organizations for the user with appwise roles in the response Authorization: JWT UBT token",
        "operationId": "getOrganizationRolesUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "name": "pGuid",
            "in": "path",
            "description": "pGuid",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/Users/{pGuid}/Organizations/": {
      "get": {
        "tags": [
          "users-rest-manager"
        ],
        "summary": "Gets organizations",
        "description": "Get organizations for the user. Authorization: User Bearer Token (UBT/psToken)",
        "operationId": "getOrganizationsUsingGET_2",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "name": "pGuid",
            "in": "path",
            "description": "pGuid",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "in": "query",
            "description": "name",
            "required": false,
            "type": "string"
          },
          {
            "name": "strategy",
            "in": "query",
            "description": "strategy ( roles or groups ). By default groups",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset into the table",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Page Size",
            "required": false,
            "type": "integer",
            "default": 100,
            "format": "int32"
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "property to sort by",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortDir",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/Users/{pGuid}/Password/": {
      "post": {
        "tags": [
          "users-rest-manager"
        ],
        "summary": "Initiate password reset request",
        "description": "Initiate password reset request. Authorization: Application Bearer Token (ABT) / user bearer token",
        "operationId": "forgotPasswordUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "name": "pGuid",
            "in": "path",
            "description": "pGuid",
            "required": true,
            "type": "string"
          },
          {
            "name": "resetBaseLink",
            "in": "query",
            "description": "resetBaseLink",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "put": {
        "tags": [
          "users-rest-manager"
        ],
        "summary": "Reset password",
        "description": "Resets the password for the key recieved by the user. Notification is sent to the user after successful password reset. Authorization: Application Bearer Token (ABT) / user bearer token",
        "operationId": "resetPasswordByUserUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "name": "password",
            "in": "query",
            "description": "password",
            "required": true,
            "type": "string"
          },
          {
            "name": "pGuid",
            "in": "path",
            "description": "pGuid",
            "required": true,
            "type": "string"
          },
          {
            "name": "passwordFromPost",
            "in": "query",
            "description": "passwordFromPost",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/Users/{pGuid}/Password/Reset/": {
      "post": {
        "tags": [
          "users-rest-manager"
        ],
        "summary": "Reset password",
        "description": "Resets the password for the key recieved by the user. Notification is sent to the user after successful password reset. Authorization: Application Bearer Token (ABT) / user bearer token",
        "operationId": "resetPasswordByUser2UsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "password",
            "description": "password",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pGuid",
            "in": "path",
            "description": "pGuid",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/Users/{pGuid}/Permission/{id}": {
      "put": {
        "tags": [
          "users-rest-manager"
        ],
        "summary": "Adds a permission to a user",
        "description": "Adds a permission to a user. Permission Matrix: [Domain admin - {Only domain admin}]  Authorization: JWT UBT Token",
        "operationId": "addPermissionUsingPUT_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          },
          {
            "name": "pGuid",
            "in": "path",
            "description": "pGuid",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "delete": {
        "tags": [
          "users-rest-manager"
        ],
        "summary": "Removes a permission for a user",
        "description": "Deletes a permission for user. Permission Matrix: [Domain admin - {Only domain admin}]  Authorization: JWT UBT Token",
        "operationId": "removePermissionUsingDELETE_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          },
          {
            "name": "pGuid",
            "in": "path",
            "description": "pGuid",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/Users/{pGuid}/Roles": {
      "get": {
        "tags": [
          "user-permissions-rest-manager"
        ],
        "summary": "Get User Permissions ",
        "description": "Get All permissions for the User.  Authorization: Application Bearer Token (ABT)",
        "operationId": "getAllUserPermissionsUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "name": "pGuid",
            "in": "path",
            "description": "pGuid",
            "required": true,
            "type": "string"
          },
          {
            "name": "clientId",
            "in": "query",
            "description": "clientId",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "400": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/Users/{username}/Password/": {
      "get": {
        "tags": [
          "rest-manager"
        ],
        "summary": "Get Reset Password link ",
        "description": "Search users within the domain. Authorization: Client credentials bearer token only",
        "operationId": "getResetPasswordLinkUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "username",
            "required": true,
            "type": "string"
          },
          {
            "name": "domain",
            "in": "query",
            "description": "domain",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/appMessages/": {
      "get": {
        "tags": [
          "application-messages-rest-manager"
        ],
        "summary": "Get List of application messages",
        "description": "Get Applicatoin Messages for current application. Use ABT JWT token for authorization - Refer: https://confluence.illumina.com/display/PLAT/Platform+JWT+tokens",
        "operationId": "getAppMessages",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "An authorized ABT JWT bearer token (Only APP to APP token has access)",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset into the table",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Page Size",
            "required": false,
            "type": "integer",
            "default": 100,
            "format": "int32"
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "property to sort by",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortDir",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "201": {
            "description": "Returns list of application messages",
            "schema": {
              "type": "object"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Unexpected error"
          }
        }
      },
      "post": {
        "tags": [
          "application-messages-rest-manager"
        ],
        "summary": "Create Application Message",
        "description": "Authorization: JWT APP bearer token, Refer: https://confluence.illumina.com/display/PLAT/Platform+JWT+tokens",
        "operationId": "createMessage",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "messageTO",
            "description": "messageTO",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ApplicationMessageTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Created Application Message",
            "schema": {
              "type": "object"
            }
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad request / Parsing error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          },
          "409": {
            "description": "Conflict - Duplicate Message"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "put": {
        "tags": [
          "application-messages-rest-manager"
        ],
        "summary": "Update Application Message",
        "description": "Authorization: JWT APP bearer token, Refer: https://confluence.illumina.com/display/PLAT/Platform+JWT+tokens",
        "operationId": "updateMessage",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "messageTO",
            "description": "messageTO",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ApplicationMessageTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated Application Message",
            "schema": {
              "type": "object"
            }
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad request / Parsing error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/appMessages/V2/": {
      "get": {
        "tags": [
          "application-messages-rest-manager"
        ],
        "summary": "Get List of application messages",
        "description": "Get Applicatoin Messages for current application. Use ABT JWT token for authorization - Refer: https://confluence.illumina.com/display/PLAT/Platform+JWT+tokens",
        "operationId": "getAppMessages_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "An authorized ABT JWT bearer token (Only APP to APP token has access)",
            "required": false,
            "type": "string"
          },
          {
            "name": "code",
            "in": "query",
            "description": "code",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset into the table",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Page Size",
            "required": false,
            "type": "integer",
            "default": 100,
            "format": "int32"
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "property to sort by",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortDir",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "201": {
            "description": "Returns list of application messages",
            "schema": {
              "type": "object"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Unexpected error"
          }
        }
      }
    },
    "/appMessages/V2/{id}": {
      "delete": {
        "tags": [
          "application-messages-rest-manager"
        ],
        "summary": "Delete a message.",
        "description": "Delete a `Message`. Use ABT JWT token for authorization - Refer: https://confluence.illumina.com/display/PLAT/Platform+JWT+tokens",
        "operationId": "delete message_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "An authorized ABT JWT bearer token (Only APP to APP token has access)",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Message Id",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "204": {
            "description": "Message Deleted",
            "schema": {
              "type": "object"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Message Not found"
          },
          "500": {
            "description": "Unexpected error"
          }
        }
      }
    },
    "/appMessages/{code}": {
      "delete": {
        "tags": [
          "application-messages-rest-manager"
        ],
        "summary": "Delete a message.",
        "description": "Delete a `Message`. Use ABT JWT token for authorization - Refer: https://confluence.illumina.com/display/PLAT/Platform+JWT+tokens",
        "operationId": "delete message",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "An authorized ABT JWT bearer token (Only APP to APP token has access)",
            "required": true,
            "type": "string"
          },
          {
            "name": "code",
            "in": "path",
            "description": "Message Id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "204": {
            "description": "Message Deleted",
            "schema": {
              "type": "object"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Message Not found"
          },
          "500": {
            "description": "Unexpected error"
          }
        }
      }
    },
    "/do/{service}/{domainObjectService}/": {
      "post": {
        "tags": [
          "rest-manager"
        ],
        "summary": "create",
        "operationId": "createUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "requestObject",
            "description": "requestObject",
            "required": true,
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "service",
            "in": "path",
            "description": "service",
            "required": true,
            "type": "string"
          },
          {
            "name": "domainObjectService",
            "in": "path",
            "description": "domainObjectService",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/do/{service}/{domainObjectService}/search": {
      "get": {
        "tags": [
          "rest-manager"
        ],
        "summary": "search",
        "operationId": "searchUsingGET_2",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "service",
            "in": "path",
            "description": "service",
            "required": true,
            "type": "string"
          },
          {
            "name": "domainObjectService",
            "in": "path",
            "description": "domainObjectService",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/do/{service}/{domainObjectService}/{id}": {
      "get": {
        "tags": [
          "rest-manager"
        ],
        "summary": "get",
        "operationId": "getUsingGET_12",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "service",
            "in": "path",
            "description": "service",
            "required": true,
            "type": "string"
          },
          {
            "name": "domainObjectService",
            "in": "path",
            "description": "domainObjectService",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "post": {
        "tags": [
          "rest-manager"
        ],
        "summary": "update",
        "operationId": "updateUsingPOST_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "requestObject",
            "description": "requestObject",
            "required": true,
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "service",
            "in": "path",
            "description": "service",
            "required": true,
            "type": "string"
          },
          {
            "name": "domainObjectService",
            "in": "path",
            "description": "domainObjectService",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "delete": {
        "tags": [
          "rest-manager"
        ],
        "summary": "delete",
        "operationId": "deleteUsingDELETE_11",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "service",
            "in": "path",
            "description": "service",
            "required": true,
            "type": "string"
          },
          {
            "name": "domainObjectService",
            "in": "path",
            "description": "domainObjectService",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/do/{service}/{domainObjectService}/{id}/{object}": {
      "get": {
        "tags": [
          "rest-manager"
        ],
        "summary": "get",
        "operationId": "getUsingGET_11",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "service",
            "in": "path",
            "description": "service",
            "required": true,
            "type": "string"
          },
          {
            "name": "domainObjectService",
            "in": "path",
            "description": "domainObjectService",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          },
          {
            "name": "object",
            "in": "path",
            "description": "object",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "post": {
        "tags": [
          "rest-manager"
        ],
        "summary": "create",
        "operationId": "createUsingPOST_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "requestObject",
            "description": "requestObject",
            "required": true,
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "service",
            "in": "path",
            "description": "service",
            "required": true,
            "type": "string"
          },
          {
            "name": "domainObjectService",
            "in": "path",
            "description": "domainObjectService",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          },
          {
            "name": "object",
            "in": "path",
            "description": "object",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/do/{service}/{domainObjectService}/{id}/{object}/{innerId}": {
      "get": {
        "tags": [
          "rest-manager"
        ],
        "summary": "get",
        "operationId": "getUsingGET_10",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "service",
            "in": "path",
            "description": "service",
            "required": true,
            "type": "string"
          },
          {
            "name": "domainObjectService",
            "in": "path",
            "description": "domainObjectService",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          },
          {
            "name": "object",
            "in": "path",
            "description": "object",
            "required": true,
            "type": "string"
          },
          {
            "name": "innerId",
            "in": "path",
            "description": "innerId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/do/{service}/{domainObjectService}/{id}/{object}/{objectId}": {
      "post": {
        "tags": [
          "rest-manager"
        ],
        "summary": "update",
        "operationId": "updateUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "requestObject",
            "description": "requestObject",
            "required": true,
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "service",
            "in": "path",
            "description": "service",
            "required": true,
            "type": "string"
          },
          {
            "name": "domainObjectService",
            "in": "path",
            "description": "domainObjectService",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          },
          {
            "name": "object",
            "in": "path",
            "description": "object",
            "required": true,
            "type": "string"
          },
          {
            "name": "objectId",
            "in": "path",
            "description": "objectId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "delete": {
        "tags": [
          "rest-manager"
        ],
        "summary": "delete",
        "operationId": "deleteUsingDELETE_10",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "service",
            "in": "path",
            "description": "service",
            "required": true,
            "type": "string"
          },
          {
            "name": "domainObjectService",
            "in": "path",
            "description": "domainObjectService",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          },
          {
            "name": "objectId",
            "in": "path",
            "description": "objectId",
            "required": true,
            "type": "string"
          },
          {
            "name": "object",
            "in": "path",
            "description": "object",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/do/{service}/{domainObjectService}/{id}/{object}/{objectId}/{object2}/{object2Id}": {
      "delete": {
        "tags": [
          "rest-manager"
        ],
        "summary": "delete",
        "operationId": "deleteUsingDELETE_9",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "service",
            "in": "path",
            "description": "service",
            "required": true,
            "type": "string"
          },
          {
            "name": "domainObjectService",
            "in": "path",
            "description": "domainObjectService",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          },
          {
            "name": "objectId",
            "in": "path",
            "description": "objectId",
            "required": true,
            "type": "string"
          },
          {
            "name": "object",
            "in": "path",
            "description": "object",
            "required": true,
            "type": "string"
          },
          {
            "name": "object2Id",
            "in": "path",
            "description": "object2Id",
            "required": true,
            "type": "string"
          },
          {
            "name": "object2",
            "in": "path",
            "description": "object2",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/download/{filetype}/{fileName}": {
      "get": {
        "tags": [
          "rest-manager"
        ],
        "summary": "getFile",
        "operationId": "getFileUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "filetype",
            "in": "path",
            "description": "filetype",
            "required": true,
            "type": "string"
          },
          {
            "name": "fileName",
            "in": "path",
            "description": "fileName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/evictAllSessions": {
      "get": {
        "tags": [
          "rest-manager"
        ],
        "summary": "evictAllSessions",
        "operationId": "evictAllSessionsUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "secretKey",
            "in": "query",
            "description": "secretKey",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/img": {
      "get": {
        "tags": [
          "rest-manager"
        ],
        "summary": "getImage",
        "operationId": "getImageUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "path",
            "in": "query",
            "description": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "type",
            "in": "query",
            "description": "type",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string",
              "format": "byte"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/is/{service}/{action}": {
      "get": {
        "tags": [
          "rest-manager"
        ],
        "summary": "Handles the default HTTP Request",
        "operationId": "handleDefaultRequestUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "service",
            "in": "path",
            "description": "service",
            "required": true,
            "type": "string"
          },
          {
            "name": "action",
            "in": "path",
            "description": "action",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "post": {
        "tags": [
          "rest-manager"
        ],
        "summary": "Handles the default HTTP Request",
        "operationId": "handleDefaultRequestUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "service",
            "in": "path",
            "description": "service",
            "required": true,
            "type": "string"
          },
          {
            "name": "action",
            "in": "path",
            "description": "action",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/stats": {
      "get": {
        "tags": [
          "rest-manager"
        ],
        "summary": "stats",
        "operationId": "statsUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/upload/{filetype}": {
      "post": {
        "tags": [
          "rest-manager"
        ],
        "summary": "handleFileUpload",
        "operationId": "handleFileUploadUsingPOST",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "file",
            "in": "formData",
            "description": "file",
            "required": false,
            "type": "file"
          },
          {
            "name": "filetype",
            "in": "path",
            "description": "filetype",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "query",
            "description": "id",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/v2/platform-api-docs": {
      "get": {
        "tags": [
          "swagger-2-rest-manager"
        ],
        "summary": "getDocumentation",
        "operationId": "getDocumentationUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "group",
            "in": "query",
            "description": "group",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Json"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/version": {
      "get": {
        "tags": [
          "rest-manager"
        ],
        "summary": "version",
        "operationId": "versionUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/{service}/{action}": {
      "get": {
        "tags": [
          "rest-manager"
        ],
        "summary": "Handles the default JSON Request",
        "operationId": "handleDefaultRequestUsingGET_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "requestObject",
            "description": "requestObject",
            "required": true,
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "service",
            "in": "path",
            "description": "service",
            "required": true,
            "type": "string"
          },
          {
            "name": "action",
            "in": "path",
            "description": "action",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "post": {
        "tags": [
          "rest-manager"
        ],
        "summary": "Handles the default JSON Request",
        "operationId": "handleDefaultRequestUsingPOST_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "requestObject",
            "description": "requestObject",
            "required": true,
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "service",
            "in": "path",
            "description": "service",
            "required": true,
            "type": "string"
          },
          {
            "name": "action",
            "in": "path",
            "description": "action",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    }
  },
  "definitions": {
    "APIModelTO": {
      "type": "object",
      "properties": {
        "client_id": {
          "type": "string"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "model": {
          "type": "string"
        },
        "modelName": {
          "type": "string"
        }
      }
    },
    "AccountTO": {
      "type": "object",
      "required": [
        "billToId",
        "billToType",
        "externalAccountNumber"
      ],
      "properties": {
        "billToId": {
          "type": "string",
          "description": "billToId"
        },
        "billToType": {
          "type": "string",
          "description": "billToType"
        },
        "createdByApp": {
          "type": "integer",
          "format": "int32"
        },
        "createdOn": {
          "type": "string"
        },
        "externalAccountNumber": {
          "type": "string",
          "description": "externalAccountNumber"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string",
          "description": "name"
        },
        "updatedOn": {
          "type": "string"
        }
      }
    },
    "ApiMetadataTO": {
      "type": "object",
      "properties": {
        "apiPath": {
          "type": "string"
        },
        "client_id": {
          "type": "string"
        },
        "consumes": {
          "type": "string"
        },
        "contextPath": {
          "type": "string"
        },
        "createdOn": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "documentation": {
          "type": "string"
        },
        "httpType": {
          "type": "string"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "is_ABT": {
          "type": "integer",
          "format": "int32"
        },
        "is_UBT": {
          "type": "integer",
          "format": "int32"
        },
        "nick_name": {
          "type": "string"
        },
        "parameters": {
          "type": "string"
        },
        "produces": {
          "type": "string"
        },
        "responses": {
          "type": "string"
        },
        "stubResponse": {
          "type": "string"
        },
        "summary": {
          "type": "string"
        },
        "tags": {
          "type": "string"
        },
        "updatedOn": {
          "type": "string"
        }
      }
    },
    "ApplicationMessageTO": {
      "type": "object",
      "required": [
        "code",
        "message",
        "type"
      ],
      "properties": {
        "code": {
          "type": "string",
          "example": "PS_AUTH_001"
        },
        "language": {
          "type": "string",
          "example": "en_US"
        },
        "level": {
          "type": "string",
          "enum": [
            "success",
            "info",
            "error"
          ]
        },
        "message": {
          "type": "string",
          "example": "User logged in"
        },
        "type": {
          "type": "string",
          "example": "message"
        }
      }
    },
    "AuditReportInputTO": {
      "type": "object",
      "properties": {
        "domainUID": {
          "type": "string"
        },
        "eventTypes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "fromDate": {
          "type": "string",
          "format": "date-time"
        },
        "organizationId": {
          "type": "string"
        },
        "toDate": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "ChildAppTO": {
      "type": "object",
      "properties": {
        "appType": {
          "type": "string",
          "enum": [
            "internal",
            "external",
            "microservice"
          ]
        },
        "clientId": {
          "type": "string"
        },
        "clientSecret": {
          "type": "string"
        },
        "iconURL": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "ownerId": {
          "type": "string"
        },
        "ownerType": {
          "type": "string"
        },
        "rURL": {
          "type": "string"
        },
        "scopeCategory": {
          "type": "string"
        }
      }
    },
    "ConfigurationGroupTO": {
      "type": "object",
      "properties": {
        "configGroupId": {
          "type": "integer",
          "format": "int64"
        },
        "groupName": {
          "type": "string"
        }
      }
    },
    "ConfigurationMetaDataTO": {
      "type": "object",
      "properties": {
        "attribKey": {
          "type": "string"
        },
        "attribValue": {
          "type": "string"
        },
        "configTO": {
          "$ref": "#/definitions/ConfigurationTO"
        },
        "metaDataId": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "ConfigurationTO": {
      "type": "object",
      "properties": {
        "client_id": {
          "type": "string"
        },
        "component": {
          "type": "string"
        },
        "configGroupName": {
          "type": "string"
        },
        "domainUID": {
          "type": "string"
        },
        "endDate": {
          "type": "string",
          "format": "date-time"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "metaData": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ConfigurationMetaDataTO"
          }
        },
        "startDate": {
          "type": "string",
          "format": "date-time"
        },
        "version": {
          "type": "string"
        }
      }
    },
    "ConsumableEntityTO": {
      "type": "object",
      "required": [
        "externalId",
        "forceEntitlement",
        "name",
        "type",
        "unit"
      ],
      "properties": {
        "createdByApp": {
          "type": "integer",
          "format": "int32"
        },
        "createdOn": {
          "type": "string"
        },
        "externalId": {
          "type": "string",
          "description": "externalId"
        },
        "forceEntitlement": {
          "type": "boolean",
          "example": false,
          "description": "forceEntitlement"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string",
          "description": "name"
        },
        "quantity": {
          "type": "integer",
          "format": "int64"
        },
        "type": {
          "type": "string",
          "description": "type"
        },
        "unit": {
          "type": "string",
          "description": "unit"
        },
        "updatedOn": {
          "type": "string"
        }
      }
    },
    "ContainerMetadataTO": {
      "type": "object",
      "required": [
        "attributeName",
        "attributeValue"
      ],
      "properties": {
        "attributeName": {
          "type": "string"
        },
        "attributeValue": {
          "type": "string"
        }
      }
    },
    "ContainerStatisticsTO": {
      "type": "object",
      "properties": {
        "attributeName": {
          "type": "string"
        },
        "attributeValue": {
          "type": "string"
        }
      }
    },
    "ContainerTO": {
      "type": "object",
      "required": [
        "name",
        "organizationId",
        "type"
      ],
      "properties": {
        "createdOn": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "metadata": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ContainerMetadataTO"
          }
        },
        "name": {
          "type": "string"
        },
        "organizationId": {
          "type": "string"
        },
        "permissions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PermissionTO"
          }
        },
        "stats": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ContainerStatisticsTO"
          }
        },
        "type": {
          "type": "string"
        },
        "updatedOn": {
          "type": "string"
        }
      }
    },
    "ContainerUserTO": {
      "type": "object",
      "properties": {
        "activationdate": {
          "type": "string"
        },
        "collaborationType": {
          "type": "string"
        },
        "company": {
          "type": "string"
        },
        "containers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ContainerTO"
          }
        },
        "countryCode": {
          "type": "string"
        },
        "createddate": {
          "type": "string"
        },
        "domain": {
          "type": "string"
        },
        "domainName": {
          "type": "string"
        },
        "domainUID": {
          "type": "string"
        },
        "domainid": {
          "type": "integer",
          "format": "int32"
        },
        "emailId": {
          "type": "string"
        },
        "firstname": {
          "type": "string"
        },
        "isOwner": {
          "type": "boolean"
        },
        "lastname": {
          "type": "string"
        },
        "lastupdatedate": {
          "type": "string"
        },
        "locked": {
          "type": "integer",
          "format": "int32"
        },
        "login": {
          "type": "string"
        },
        "mustChangePassword": {
          "type": "boolean"
        },
        "pGuid": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "roles": {
          "type": "object"
        },
        "title": {
          "type": "string"
        },
        "userid": {
          "type": "integer",
          "format": "int32"
        },
        "username": {
          "type": "string"
        },
        "uuid": {
          "type": "string"
        }
      }
    },
    "CustomCredentialsTO": {
      "type": "object",
      "properties": {
        "authorizationCode": {
          "type": "string"
        },
        "creationDate": {
          "type": "string",
          "format": "date-time"
        },
        "custom_credential_id": {
          "type": "integer",
          "format": "int32"
        },
        "domain": {
          "type": "string"
        },
        "expireson": {
          "type": "string",
          "format": "date-time"
        },
        "lastupdateDate": {
          "type": "string",
          "format": "date-time"
        },
        "username": {
          "type": "string"
        }
      }
    },
    "DmapAuthRequestDto": {
      "type": "object",
      "properties": {
        "encryptedPassword": {
          "type": "string"
        },
        "username": {
          "type": "string"
        }
      }
    },
    "EntitlementTO": {
      "type": "object",
      "required": [
        "consumableEntityList",
        "name"
      ],
      "properties": {
        "consumableEntityList": {
          "type": "array",
          "description": "consumableEntityList",
          "items": {
            "$ref": "#/definitions/ConsumableEntityTO"
          }
        },
        "createdByApp": {
          "type": "integer",
          "format": "int32"
        },
        "createdOn": {
          "type": "string"
        },
        "entitlementType": {
          "type": "string"
        },
        "externalContractNumber": {
          "type": "string"
        },
        "fromDate": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "toDate": {
          "type": "string"
        },
        "updatedOn": {
          "type": "string"
        }
      }
    },
    "Json": {
      "type": "object"
    },
    "NotificationEmailTemplateTO": {
      "type": "object",
      "required": [
        "name",
        "subject",
        "text"
      ],
      "properties": {
        "client_id": {
          "type": "string"
        },
        "createdOn": {
          "type": "string",
          "format": "date-time"
        },
        "name": {
          "type": "string",
          "example": "Password Reset Template"
        },
        "parameters": {
          "type": "string"
        },
        "subject": {
          "type": "string",
          "example": "Forgot Password"
        },
        "text": {
          "type": "string"
        },
        "updatedOn": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "NotificationParameter": {
      "type": "object",
      "properties": {
        "address": {
          "type": "string"
        },
        "templateParameters": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "NotificationRuleTO": {
      "type": "object",
      "required": [
        "name",
        "rule",
        "templateId",
        "thresholdLimit"
      ],
      "properties": {
        "createdOn": {
          "type": "string",
          "format": "date-time"
        },
        "entitlementId": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "reminderAlertsIntervalAfterThresholdLimitExpiry": {
          "type": "string"
        },
        "reminderAlertsIntervalBeforeThresholdLimitExpiry": {
          "type": "string"
        },
        "rule": {
          "type": "string"
        },
        "templateId": {
          "type": "string"
        },
        "thresholdLimit": {
          "type": "number"
        },
        "totalReminderAlertsAfterThresholdLimitExpiry": {
          "type": "number"
        },
        "totalReminderAlertsBeforeThresholdLimitExpiry": {
          "type": "number"
        },
        "updatedOn": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "OrganizationTO": {
      "type": "object",
      "properties": {
        "applicationId": {
          "type": "string"
        },
        "company": {
          "type": "string"
        },
        "createdById": {
          "type": "string"
        },
        "createdOn": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "domainName": {
          "type": "string"
        },
        "domainUID": {
          "type": "string"
        },
        "founderFirstName": {
          "type": "string"
        },
        "founderId": {
          "type": "string"
        },
        "founderLastName": {
          "type": "string"
        },
        "iconUrl": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "isCollaborationAllowed": {
          "type": "integer",
          "format": "int32"
        },
        "location": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "ownerFirstName": {
          "type": "string"
        },
        "ownerId": {
          "type": "string"
        },
        "ownerLastName": {
          "type": "string"
        },
        "updatedOn": {
          "type": "string"
        }
      }
    },
    "PSGroupTO": {
      "type": "object",
      "properties": {
        "applicationId": {
          "type": "string"
        },
        "createdOn": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "founderId": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "updatedOn": {
          "type": "string"
        }
      }
    },
    "Page«ContainerTO»": {
      "type": "object",
      "properties": {
        "content": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ContainerTO"
          }
        },
        "first": {
          "type": "boolean"
        },
        "last": {
          "type": "boolean"
        },
        "number": {
          "type": "integer",
          "format": "int32"
        },
        "numberOfElements": {
          "type": "integer",
          "format": "int32"
        },
        "size": {
          "type": "integer",
          "format": "int32"
        },
        "sort": {
          "$ref": "#/definitions/Sort"
        },
        "totalElements": {
          "type": "integer",
          "format": "int64"
        },
        "totalPages": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "Page«object»": {
      "type": "object",
      "properties": {
        "content": {
          "type": "array",
          "items": {
            "type": "object"
          }
        },
        "first": {
          "type": "boolean"
        },
        "last": {
          "type": "boolean"
        },
        "number": {
          "type": "integer",
          "format": "int32"
        },
        "numberOfElements": {
          "type": "integer",
          "format": "int32"
        },
        "size": {
          "type": "integer",
          "format": "int32"
        },
        "sort": {
          "$ref": "#/definitions/Sort"
        },
        "totalElements": {
          "type": "integer",
          "format": "int64"
        },
        "totalPages": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "PasswordTO": {
      "type": "object",
      "properties": {
        "currentPassword": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      }
    },
    "PermissionListTO": {
      "type": "object",
      "properties": {
        "permissions": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "PermissionTO": {
      "type": "object",
      "required": [
        "description",
        "name"
      ],
      "properties": {
        "createdOn": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "updatedOn": {
          "type": "string"
        }
      }
    },
    "RoleTO": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "appId": {
          "type": "string"
        },
        "appName": {
          "type": "string"
        },
        "createdOn": {
          "type": "string"
        },
        "default": {
          "type": "boolean"
        },
        "description": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string",
          "description": "name"
        },
        "permissions": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "updatedOn": {
          "type": "string"
        }
      }
    },
    "ScopeTO": {
      "type": "object",
      "properties": {
        "category": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "name": {
          "type": "string"
        }
      }
    },
    "SendNotificationRequestTO": {
      "type": "object",
      "required": [
        "templateId"
      ],
      "properties": {
        "parameters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NotificationParameter"
          }
        },
        "templateId": {
          "type": "string"
        }
      }
    },
    "Sort": {
      "type": "object"
    },
    "UsageTO": {
      "type": "object",
      "required": [
        "consumableEntityId",
        "quantity"
      ],
      "properties": {
        "consumableEntity": {
          "$ref": "#/definitions/ConsumableEntityTO"
        },
        "consumableEntityId": {
          "type": "string",
          "description": "consumableEntityId"
        },
        "createdOn": {
          "type": "string"
        },
        "entitlementType": {
          "type": "string"
        },
        "entitlementTypeId": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "quantity": {
          "type": "integer",
          "format": "int64",
          "description": "quantity"
        },
        "updatedOn": {
          "type": "string"
        }
      }
    },
    "UserTO": {
      "type": "object",
      "properties": {
        "activationdate": {
          "type": "string"
        },
        "collaborationType": {
          "type": "string"
        },
        "company": {
          "type": "string"
        },
        "countryCode": {
          "type": "string"
        },
        "createddate": {
          "type": "string"
        },
        "domain": {
          "type": "string"
        },
        "domainName": {
          "type": "string"
        },
        "domainUID": {
          "type": "string"
        },
        "domainid": {
          "type": "integer",
          "format": "int32"
        },
        "emailId": {
          "type": "string"
        },
        "firstname": {
          "type": "string"
        },
        "isOwner": {
          "type": "boolean"
        },
        "lastname": {
          "type": "string"
        },
        "lastupdatedate": {
          "type": "string"
        },
        "locked": {
          "type": "integer",
          "format": "int32"
        },
        "login": {
          "type": "string"
        },
        "mustChangePassword": {
          "type": "boolean"
        },
        "pGuid": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "roles": {
          "type": "object"
        },
        "title": {
          "type": "string"
        },
        "userid": {
          "type": "integer",
          "format": "int32"
        },
        "username": {
          "type": "string"
        },
        "uuid": {
          "type": "string"
        }
      }
    }
  }
}